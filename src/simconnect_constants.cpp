#include "module_simconnect.hpp"

namespace prepar3d
{
namespace _internal
{

void define_constants(boost::python::scope *s)
{
	ADD_ATTRIBUTE(s, SIMCONNECT_UNUSED);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBJECT_ID_USER);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_IGNORE_FIELD);
	ADD_ATTRIBUTE(s, SIMCONNECT_CLIENTDATA_MAX_SIZE);

	// Notification Group priority values
	ADD_ATTRIBUTE(s, SIMCONNECT_GROUP_PRIORITY_HIGHEST);
	ADD_ATTRIBUTE(s, SIMCONNECT_GROUP_PRIORITY_HIGHEST_MASKABLE);
	ADD_ATTRIBUTE(s, SIMCONNECT_GROUP_PRIORITY_STANDARD);
	ADD_ATTRIBUTE(s, SIMCONNECT_GROUP_PRIORITY_DEFAULT);
	ADD_ATTRIBUTE(s, SIMCONNECT_GROUP_PRIORITY_LOWEST);

	//Weather observations Metar strings
	ADD_ATTRIBUTE(s, MAX_METAR_LENGTH);

	// Maximum thermal size is 100 km.
	ADD_ATTRIBUTE(s, MAX_THERMAL_SIZE);
	ADD_ATTRIBUTE(s, MAX_THERMAL_RATE);

	// Camera system commands
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_MOVE_LEFT);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_MOVE_RIGHT);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_MOVE_UP);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_MOVE_DOWN);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_MOVE_FORWARD);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_MOVE_BACK);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_PITCH_UP);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_PITCH_DOWN);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_YAW_LEFT);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_YAW_RIGHT);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_ROLL_LEFT);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_ROLL_RIGHT);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_ZOOM_IN);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_ZOOM_OUT);
	ADD_ATTRIBUTE(s, SIMCONNECT_CAMERA_RESET_ROTATION);

	// Observer values
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_REGIME_TELLURIAN);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_REGIME_TERRESTRIAL);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_REGIME_GHOST);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_FOCUS_WORLD);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_FOCUS_FIXED);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_ROTATE_SELF);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_ROTATE_TARGET);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_AXIS_PITCH);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_AXIS_ROLL);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_AXIS_YAW);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_AXIS_ROLL);
	ADD_ATTRIBUTE(s, SIMCONNECT_OBSERVER_AXIS_YAW);

	// SIMCONNECT_DATA_INITPOSITION.Airspeed
	ADD_ATTRIBUTE(s, INITPOSITION_AIRSPEED_CRUISE);
	ADD_ATTRIBUTE(s, INITPOSITION_AIRSPEED_KEEP);


	// AddToClientDataDefinition dwSizeOrType parameter type values
	ADD_ATTRIBUTE(s, SIMCONNECT_CLIENTDATATYPE_INT8);
	ADD_ATTRIBUTE(s, SIMCONNECT_CLIENTDATATYPE_INT16);
	ADD_ATTRIBUTE(s, SIMCONNECT_CLIENTDATATYPE_INT32);
	ADD_ATTRIBUTE(s, SIMCONNECT_CLIENTDATATYPE_INT64);
	ADD_ATTRIBUTE(s, SIMCONNECT_CLIENTDATATYPE_FLOAT32);
	ADD_ATTRIBUTE(s, SIMCONNECT_CLIENTDATATYPE_FLOAT64);

	// AddToClientDataDefinition dwOffset parameter special values
	ADD_ATTRIBUTE(s, SIMCONNECT_CLIENTDATAOFFSET_AUTO);

	// Open ConfigIndex parameter special value
	ADD_ATTRIBUTE(s, SIMCONNECT_OPEN_CONFIGINDEX_LOCAL);

	//	SIMCONNECT_EVENT_SUBSCRIPTION_FLAG
	ADD_ATTRIBUTE(s, SIMCONNECT_EVENT_SUBSCRIPTION_FLAG_DEFAULT);
	ADD_ATTRIBUTE(s, SIMCONNECT_EVENT_SUBSCRIPTION_FLAG_BLOCK);

	// flags for SIMCONNECT_RECV_ID_VOR_LIST
	ADD_ATTRIBUTE(s, SIMCONNECT_RECV_ID_VOR_LIST_HAS_NAV_SIGNAL);
	ADD_ATTRIBUTE(s, SIMCONNECT_RECV_ID_VOR_LIST_HAS_LOCALIZER);
	ADD_ATTRIBUTE(s, SIMCONNECT_RECV_ID_VOR_LIST_HAS_GLIDE_SLOPE);
	ADD_ATTRIBUTE(s, SIMCONNECT_RECV_ID_VOR_LIST_HAS_DME);

	// bits for the Waypoint Flags field: may be combined
	ADD_ATTRIBUTE(s, SIMCONNECT_WAYPOINT_NONE);
	ADD_ATTRIBUTE(s, SIMCONNECT_WAYPOINT_SPEED_REQUESTED);
	ADD_ATTRIBUTE(s, SIMCONNECT_WAYPOINT_THROTTLE_REQUESTED);
	ADD_ATTRIBUTE(s, SIMCONNECT_WAYPOINT_COMPUTE_VERTICAL_SPEED);
	ADD_ATTRIBUTE(s, SIMCONNECT_WAYPOINT_ALTITUDE_IS_AGL);
	ADD_ATTRIBUTE(s, SIMCONNECT_WAYPOINT_ON_GROUND);
	ADD_ATTRIBUTE(s, SIMCONNECT_WAYPOINT_REVERSE);
	ADD_ATTRIBUTE(s, SIMCONNECT_WAYPOINT_WRAP_TO_FIRST);

	ADD_ATTRIBUTE(s, S_OK);
	ADD_ATTRIBUTE(s, S_FALSE);
	ADD_ATTRIBUTE(s, E_FAIL);
	ADD_ATTRIBUTE(s, E_INVALIDARG);
	ADD_ATTRIBUTE(s, SIMCONNECT_OPEN_CONFIGINDEX_LOCAL);
}
} // end namespace _internal
} // end namespace prepar3d
