#include "wrapper.hpp"
#include "converter.hpp"
#include "dispatch_receiver.hpp"
#include "dispatch_listener.hpp"

BOOST_PYTHON_MODULE(simconnect)
{
	to_python_converter<DWORD, prepar3d::simconnect::converter::FROM_DWORD>();
	to_python_converter<char, prepar3d::simconnect::converter::FROM_CHAR>();
	to_python_converter<unsigned char[8], prepar3d::simconnect::converter::FROM_TYPE_ARRAY<unsigned char, 8> >();

	boost::python::class_<GUID>("GUID").add_property("Data1", &GUID::Data1).add_property("Data2", &GUID::Data2).add_property("Data3",
			&GUID::Data3).add_property("Data4", &GUID::Data4);

//#######################################################################################
// advanced classes
//#######################################################################################

	class_<prepar3d::simconnect::DispatchReceiver>("DispatchReceiver", init<PyObject*>())
			.def("registerID", &prepar3d::simconnect::DispatchReceiver::registerID)
			.def("getNextDispatch",	&prepar3d::simconnect::DispatchReceiver::getNextDispatch);

	class_<prepar3d::simconnect::DispatchListener>("DispatchListener", init<PyObject*>())
			.def("subscribeSystemEvent", &prepar3d::simconnect::DispatchListener::subscribeSystemEvent)
			.def("listen", &prepar3d::simconnect::DispatchListener::listen);

//#######################################################################################
//  function section
//#######################################################################################

	def("SimConnect_AddClientEventToNotificationGroup", prepar3d::simconnect::wrapper::addClientEventToNotificationGroup);
	def("SimConnect_AddToClientDataDefinition", prepar3d::simconnect::wrapper::addToClientDataDefinition);
	def("SimConnect_AddToDataDefinition", prepar3d::simconnect::wrapper::addToDataDefinition);
	def("SimConnect_ChangeVehicle", prepar3d::simconnect::wrapper::changeVehicle);
	def("SimConnect_ClearClientDataDefinition", prepar3d::simconnect::wrapper::clearClientDataDefinition);
	def("SimConnect_ClearDataDefinition", prepar3d::simconnect::wrapper::clearDataDefinition);
	def("SimConnect_ClearInputGroup", prepar3d::simconnect::wrapper::clearInputGroup);
	def("SimConnect_Close", prepar3d::simconnect::wrapper::close);
	def("SimConnect_CreateClientData", prepar3d::simconnect::wrapper::createClientData);
	def("SimConnect_FlightLoad", prepar3d::simconnect::wrapper::flightLoad);
	def("SimConnect_FlightPlanLoad", prepar3d::simconnect::wrapper::flightPlanLoad);
	def("SimConnect_GetLastSentPacketID", prepar3d::simconnect::wrapper::getLastSentPacketID);
//	def("SimConnect_GetNextDispatch", prepar3d::simconnect::wrapper::getNextDispatch);

	def("SimConnect_Open", prepar3d::simconnect::wrapper::open);

	def("SimConnect_CallDispatch", prepar3d::simconnect::wrapper::callDispatch);
	def("SimConnect_SubscribeToSystemEvent", prepar3d::simconnect::wrapper::subscribeToSystemEvent);

	to_python_converter<SIMCONNECT_DATA_GROUND_INFO[1], prepar3d::simconnect::converter::FROM_TYPE_ARRAY<SIMCONNECT_DATA_GROUND_INFO, 1> >();
	to_python_converter<char[128], prepar3d::simconnect::converter::FROM_CHAR_ARRAY<128> >();
	to_python_converter<char[64], prepar3d::simconnect::converter::FROM_CHAR_ARRAY<64> >();
	to_python_converter<SIMCONNECT_DATA_FACILITY_VOR[1], prepar3d::simconnect::converter::FROM_TYPE_ARRAY<SIMCONNECT_DATA_FACILITY_VOR, 1> >();
	to_python_converter<SIMCONNECT_DATA_FACILITY_TACAN[1],
			prepar3d::simconnect::converter::FROM_TYPE_ARRAY<SIMCONNECT_DATA_FACILITY_TACAN, 1> >();
	to_python_converter<SIMCONNECT_DATA_FACILITY_NDB[1], prepar3d::simconnect::converter::FROM_TYPE_ARRAY<SIMCONNECT_DATA_FACILITY_NDB, 1> >();
	to_python_converter<SIMCONNECT_DATA_FACILITY_WAYPOINT[1],
			prepar3d::simconnect::converter::FROM_TYPE_ARRAY<SIMCONNECT_DATA_FACILITY_WAYPOINT, 1> >();
	to_python_converter<SIMCONNECT_DATA_FACILITY_AIRPORT[1],
			prepar3d::simconnect::converter::FROM_TYPE_ARRAY<SIMCONNECT_DATA_FACILITY_AIRPORT, 1> >();
	to_python_converter<char[9], prepar3d::simconnect::converter::FROM_CHAR_ARRAY<9> >();
	to_python_converter<char[50], prepar3d::simconnect::converter::FROM_CHAR_ARRAY<50> >();
	to_python_converter<char[30], prepar3d::simconnect::converter::FROM_CHAR_ARRAY<30> >();
	to_python_converter<BYTE[1], prepar3d::simconnect::converter::FROM_TYPE_ARRAY<BYTE, 1> >();
	to_python_converter<char[1], prepar3d::simconnect::converter::FROM_CHAR_ARRAY<1> >();
	to_python_converter<char[MAX_PATH], prepar3d::simconnect::converter::FROM_CHAR_ARRAY<MAX_PATH> >();
	to_python_converter<char[256], prepar3d::simconnect::converter::FROM_CHAR_ARRAY<256> >();

//----------------------------------------------------------------------------
//        Constants
//----------------------------------------------------------------------------

	scope().attr("SIMCONNECT_UNUSED") = SIMCONNECT_UNUSED;
	scope().attr("SIMCONNECT_OBJECT_ID_USER") = SIMCONNECT_OBJECT_ID_USER;
	scope().attr("SIMCONNECT_CAMERA_IGNORE_FIELD") = SIMCONNECT_CAMERA_IGNORE_FIELD;
	scope().attr("SIMCONNECT_CLIENTDATA_MAX_SIZE") = SIMCONNECT_CLIENTDATA_MAX_SIZE;
	scope().attr("SIMCONNECT_GROUP_PRIORITY_HIGHEST") = SIMCONNECT_GROUP_PRIORITY_HIGHEST;
	scope().attr("SIMCONNECT_GROUP_PRIORITY_HIGHEST_MASKABLE") = SIMCONNECT_GROUP_PRIORITY_HIGHEST_MASKABLE;
	scope().attr("SIMCONNECT_GROUP_PRIORITY_STANDARD") = SIMCONNECT_GROUP_PRIORITY_STANDARD;
	scope().attr("SIMCONNECT_GROUP_PRIORITY_DEFAULT") = SIMCONNECT_GROUP_PRIORITY_DEFAULT;
	scope().attr("SIMCONNECT_GROUP_PRIORITY_LOWEST") = SIMCONNECT_GROUP_PRIORITY_LOWEST;
	scope().attr("MAX_METAR_LENGTH") = MAX_METAR_LENGTH;
	scope().attr("MAX_THERMAL_SIZE") = MAX_THERMAL_SIZE;
	scope().attr("MAX_THERMAL_RATE") = MAX_THERMAL_RATE;
	scope().attr("SIMCONNECT_CAMERA_MOVE_LEFT") = SIMCONNECT_CAMERA_MOVE_LEFT;
	scope().attr("SIMCONNECT_CAMERA_MOVE_RIGHT") = SIMCONNECT_CAMERA_MOVE_RIGHT;
	scope().attr("SIMCONNECT_CAMERA_MOVE_UP") = SIMCONNECT_CAMERA_MOVE_UP;
	scope().attr("SIMCONNECT_CAMERA_MOVE_DOWN") = SIMCONNECT_CAMERA_MOVE_DOWN;
	scope().attr("SIMCONNECT_CAMERA_MOVE_FORWARD") = SIMCONNECT_CAMERA_MOVE_FORWARD;
	scope().attr("SIMCONNECT_CAMERA_MOVE_BACK") = SIMCONNECT_CAMERA_MOVE_BACK;
	scope().attr("SIMCONNECT_CAMERA_PITCH_UP") = SIMCONNECT_CAMERA_PITCH_UP;
	scope().attr("SIMCONNECT_CAMERA_PITCH_DOWN") = SIMCONNECT_CAMERA_PITCH_DOWN;
	scope().attr("SIMCONNECT_CAMERA_YAW_LEFT") = SIMCONNECT_CAMERA_YAW_LEFT;
	scope().attr("SIMCONNECT_CAMERA_YAW_RIGHT") = SIMCONNECT_CAMERA_YAW_RIGHT;
	scope().attr("SIMCONNECT_CAMERA_ROLL_LEFT") = SIMCONNECT_CAMERA_ROLL_LEFT;
	scope().attr("SIMCONNECT_CAMERA_ROLL_RIGHT") = SIMCONNECT_CAMERA_ROLL_RIGHT;
	scope().attr("SIMCONNECT_CAMERA_ZOOM_IN") = SIMCONNECT_CAMERA_ZOOM_IN;
	scope().attr("SIMCONNECT_CAMERA_ZOOM_OUT") = SIMCONNECT_CAMERA_ZOOM_OUT;
	scope().attr("SIMCONNECT_CAMERA_RESET_ROTATION") = SIMCONNECT_CAMERA_RESET_ROTATION;
	scope().attr("SIMCONNECT_OBSERVER_REGIME_TELLURIAN") = SIMCONNECT_OBSERVER_REGIME_TELLURIAN;
	scope().attr("SIMCONNECT_OBSERVER_REGIME_TERRESTRIAL") = SIMCONNECT_OBSERVER_REGIME_TERRESTRIAL;
	scope().attr("SIMCONNECT_OBSERVER_REGIME_GHOST") = SIMCONNECT_OBSERVER_REGIME_GHOST;
	scope().attr("SIMCONNECT_OBSERVER_FOCUS_WORLD") = SIMCONNECT_OBSERVER_FOCUS_WORLD;
	scope().attr("SIMCONNECT_OBSERVER_FOCUS_FIXED") = SIMCONNECT_OBSERVER_FOCUS_FIXED;
	scope().attr("SIMCONNECT_OBSERVER_ROTATE_SELF") = SIMCONNECT_OBSERVER_ROTATE_SELF;
	scope().attr("SIMCONNECT_OBSERVER_ROTATE_TARGET") = SIMCONNECT_OBSERVER_ROTATE_TARGET;
	scope().attr("SIMCONNECT_OBSERVER_AXIS_PITCH") = SIMCONNECT_OBSERVER_AXIS_PITCH;
	scope().attr("SIMCONNECT_OBSERVER_AXIS_ROLL") = SIMCONNECT_OBSERVER_AXIS_ROLL;
	scope().attr("SIMCONNECT_OBSERVER_AXIS_YAW") = SIMCONNECT_OBSERVER_AXIS_YAW;
	scope().attr("INITPOSITION_AIRSPEED_CRUISE") = INITPOSITION_AIRSPEED_CRUISE;
	scope().attr("INITPOSITION_AIRSPEED_KEEP") = INITPOSITION_AIRSPEED_KEEP;
	scope().attr("SIMCONNECT_CLIENTDATATYPE_INT8") = SIMCONNECT_CLIENTDATATYPE_INT8;
	scope().attr("SIMCONNECT_CLIENTDATATYPE_INT16") = SIMCONNECT_CLIENTDATATYPE_INT16;
	scope().attr("SIMCONNECT_CLIENTDATATYPE_INT32") = SIMCONNECT_CLIENTDATATYPE_INT32;
	scope().attr("SIMCONNECT_CLIENTDATATYPE_INT64") = SIMCONNECT_CLIENTDATATYPE_INT64;
	scope().attr("SIMCONNECT_CLIENTDATATYPE_FLOAT32") = SIMCONNECT_CLIENTDATATYPE_FLOAT32;
	scope().attr("SIMCONNECT_CLIENTDATATYPE_FLOAT64") = SIMCONNECT_CLIENTDATATYPE_FLOAT64;
	scope().attr("SIMCONNECT_CLIENTDATAOFFSET_AUTO") = SIMCONNECT_CLIENTDATAOFFSET_AUTO;
	scope().attr("SIMCONNECT_OPEN_CONFIGINDEX_LOCAL") = SIMCONNECT_OPEN_CONFIGINDEX_LOCAL;
	scope().attr("SIMCONNECT_EVENT_SUBSCRIPTION_FLAG_DEFAULT") = SIMCONNECT_EVENT_SUBSCRIPTION_FLAG_DEFAULT;
	scope().attr("SIMCONNECT_EVENT_SUBSCRIPTION_FLAG_BLOCK") = SIMCONNECT_EVENT_SUBSCRIPTION_FLAG_BLOCK;
	scope().attr("SIMCONNECT_RECV_ID_VOR_LIST_HAS_NAV_SIGNAL") = SIMCONNECT_RECV_ID_VOR_LIST_HAS_NAV_SIGNAL;
	scope().attr("SIMCONNECT_RECV_ID_VOR_LIST_HAS_LOCALIZER") = SIMCONNECT_RECV_ID_VOR_LIST_HAS_LOCALIZER;
	scope().attr("SIMCONNECT_RECV_ID_VOR_LIST_HAS_GLIDE_SLOPE") = SIMCONNECT_RECV_ID_VOR_LIST_HAS_GLIDE_SLOPE;
	scope().attr("SIMCONNECT_RECV_ID_VOR_LIST_HAS_DME") = SIMCONNECT_RECV_ID_VOR_LIST_HAS_DME;
	scope().attr("SIMCONNECT_WAYPOINT_NONE") = SIMCONNECT_WAYPOINT_NONE;
	scope().attr("SIMCONNECT_WAYPOINT_SPEED_REQUESTED") = SIMCONNECT_WAYPOINT_SPEED_REQUESTED;
	scope().attr("SIMCONNECT_WAYPOINT_THROTTLE_REQUESTED") = SIMCONNECT_WAYPOINT_THROTTLE_REQUESTED;
	scope().attr("SIMCONNECT_WAYPOINT_COMPUTE_VERTICAL_SPEED") = SIMCONNECT_WAYPOINT_COMPUTE_VERTICAL_SPEED;
	scope().attr("SIMCONNECT_WAYPOINT_ALTITUDE_IS_AGL") = SIMCONNECT_WAYPOINT_ALTITUDE_IS_AGL;
	scope().attr("SIMCONNECT_WAYPOINT_ON_GROUND") = SIMCONNECT_WAYPOINT_ON_GROUND;
	scope().attr("SIMCONNECT_WAYPOINT_REVERSE") = SIMCONNECT_WAYPOINT_REVERSE;
	scope().attr("SIMCONNECT_WAYPOINT_WRAP_TO_FIRST") = SIMCONNECT_WAYPOINT_WRAP_TO_FIRST;
	scope().attr("SIMCONNECT_EVENT_FLAG_DEFAULT") = SIMCONNECT_EVENT_FLAG_DEFAULT;
	scope().attr("SIMCONNECT_EVENT_FLAG_FAST_REPEAT_TIMER") = SIMCONNECT_EVENT_FLAG_FAST_REPEAT_TIMER;
	scope().attr("SIMCONNECT_EVENT_FLAG_SLOW_REPEAT_TIMER") = SIMCONNECT_EVENT_FLAG_SLOW_REPEAT_TIMER;
	scope().attr("SIMCONNECT_EVENT_FLAG_GROUPID_IS_PRIORITY") = SIMCONNECT_EVENT_FLAG_GROUPID_IS_PRIORITY;
	scope().attr("SIMCONNECT_DATA_REQUEST_FLAG_DEFAULT") = SIMCONNECT_DATA_REQUEST_FLAG_DEFAULT;
	scope().attr("SIMCONNECT_DATA_REQUEST_FLAG_CHANGED") = SIMCONNECT_DATA_REQUEST_FLAG_CHANGED;
	scope().attr("SIMCONNECT_DATA_REQUEST_FLAG_TAGGED") = SIMCONNECT_DATA_REQUEST_FLAG_TAGGED;
	scope().attr("SIMCONNECT_DATA_REQUEST_FLAG_BLOCK") = SIMCONNECT_DATA_REQUEST_FLAG_BLOCK;
	scope().attr("SIMCONNECT_DATA_SET_FLAG_DEFAULT") = SIMCONNECT_DATA_SET_FLAG_DEFAULT;
	scope().attr("SIMCONNECT_DATA_SET_FLAG_TAGGED") = SIMCONNECT_DATA_SET_FLAG_TAGGED;
	scope().attr("SIMCONNECT_DATA_SET_FLAG_UNBLOCK") = SIMCONNECT_DATA_SET_FLAG_UNBLOCK;
	scope().attr("SIMCONNECT_CREATE_CLIENT_DATA_FLAG_DEFAULT") = SIMCONNECT_CREATE_CLIENT_DATA_FLAG_DEFAULT;
	scope().attr("SIMCONNECT_CREATE_CLIENT_DATA_FLAG_READ_ONLY") = SIMCONNECT_CREATE_CLIENT_DATA_FLAG_READ_ONLY;
	scope().attr("SIMCONNECT_CLIENT_DATA_REQUEST_FLAG_DEFAULT") = SIMCONNECT_CLIENT_DATA_REQUEST_FLAG_DEFAULT;
	scope().attr("SIMCONNECT_CLIENT_DATA_REQUEST_FLAG_CHANGED") = SIMCONNECT_CLIENT_DATA_REQUEST_FLAG_CHANGED;
	scope().attr("SIMCONNECT_CLIENT_DATA_REQUEST_FLAG_TAGGED") = SIMCONNECT_CLIENT_DATA_REQUEST_FLAG_TAGGED;
	scope().attr("SIMCONNECT_CLIENT_DATA_REQUEST_FLAG_BLOCK") = SIMCONNECT_CLIENT_DATA_REQUEST_FLAG_BLOCK;
	scope().attr("SIMCONNECT_CLIENT_DATA_SET_FLAG_DEFAULT") = SIMCONNECT_CLIENT_DATA_SET_FLAG_DEFAULT;
	scope().attr("SIMCONNECT_CLIENT_DATA_SET_FLAG_TAGGED") = SIMCONNECT_CLIENT_DATA_SET_FLAG_TAGGED;
	scope().attr("SIMCONNECT_CLIENT_DATA_SET_FLAG_UNBLOCK") = SIMCONNECT_CLIENT_DATA_SET_FLAG_UNBLOCK;
	scope().attr("SIMCONNECT_VIEW_SYSTEM_EVENT_DATA_COCKPIT_2D") = SIMCONNECT_VIEW_SYSTEM_EVENT_DATA_COCKPIT_2D;
	scope().attr("SIMCONNECT_VIEW_SYSTEM_EVENT_DATA_COCKPIT_VIRTUAL") = SIMCONNECT_VIEW_SYSTEM_EVENT_DATA_COCKPIT_VIRTUAL;
	scope().attr("SIMCONNECT_VIEW_SYSTEM_EVENT_DATA_ORTHOGONAL") = SIMCONNECT_VIEW_SYSTEM_EVENT_DATA_ORTHOGONAL;
	scope().attr("SIMCONNECT_SOUND_SYSTEM_EVENT_DATA_MASTER") = SIMCONNECT_SOUND_SYSTEM_EVENT_DATA_MASTER;
	scope().attr("SIMCONNECT_EXTERNAL_SIM_CALLBACK_FLAG_CREATE") = SIMCONNECT_EXTERNAL_SIM_CALLBACK_FLAG_CREATE;
	scope().attr("SIMCONNECT_EXTERNAL_SIM_CALLBACK_FLAG_DESTROY") = SIMCONNECT_EXTERNAL_SIM_CALLBACK_FLAG_DESTROY;
	scope().attr("SIMCONNECT_EXTERNAL_SIM_CALLBACK_FLAG_SIMULATE") = SIMCONNECT_EXTERNAL_SIM_CALLBACK_FLAG_SIMULATE;
	scope().attr("SIMCONNECT_EXTERNAL_SIM_CALLBACK_FLAG_LOCATION_CHANGED") = SIMCONNECT_EXTERNAL_SIM_CALLBACK_FLAG_LOCATION_CHANGED;
	scope().attr("SIMCONNECT_EXTERNAL_SIM_CALLBACK_FLAG_EVENT") = SIMCONNECT_EXTERNAL_SIM_CALLBACK_FLAG_EVENT;
	scope().attr("SIMCONNECT_GROUND_INFO_SOURCE_FLAG_TERRAIN") = SIMCONNECT_GROUND_INFO_SOURCE_FLAG_TERRAIN;
	scope().attr("SIMCONNECT_GROUND_INFO_SOURCE_FLAG_PLATFORMS") = SIMCONNECT_GROUND_INFO_SOURCE_FLAG_PLATFORMS;
	scope().attr("SIMCONNECT_GROUND_INFO_SOURCE_FLAG_BATHYMETRY") = SIMCONNECT_GROUND_INFO_SOURCE_FLAG_BATHYMETRY;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_INTERIOR_CAST") = SIMCONNECT_SHADOW_FLAGS_INTERIOR_CAST;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_INTERIOR_RECEIVE") = SIMCONNECT_SHADOW_FLAGS_INTERIOR_RECEIVE;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_EXTERIOR_CAST") = SIMCONNECT_SHADOW_FLAGS_EXTERIOR_CAST;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_EXTERIOR_RECEIVE") = SIMCONNECT_SHADOW_FLAGS_EXTERIOR_RECEIVE;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_SIMOBJECTS_CAST") = SIMCONNECT_SHADOW_FLAGS_SIMOBJECTS_CAST;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_SIMOBJECTS_RECEIVE") = SIMCONNECT_SHADOW_FLAGS_SIMOBJECTS_RECEIVE;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_TERRAIN_CAST") = SIMCONNECT_SHADOW_FLAGS_TERRAIN_CAST;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_TERRAIN_RECEIVE") = SIMCONNECT_SHADOW_FLAGS_TERRAIN_RECEIVE;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_VEGETATION_CAST") = SIMCONNECT_SHADOW_FLAGS_VEGETATION_CAST;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_VEGETATION_RECEIVE") = SIMCONNECT_SHADOW_FLAGS_VEGETATION_RECEIVE;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_BUILDINGS_CAST") = SIMCONNECT_SHADOW_FLAGS_BUILDINGS_CAST;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_BUILDINGS_RECEIVE") = SIMCONNECT_SHADOW_FLAGS_BUILDINGS_RECEIVE;
	scope().attr("SIMCONNECT_SHADOW_FLAGS_CLOUDS_CAST") = SIMCONNECT_SHADOW_FLAGS_CLOUDS_CAST;
	scope().attr("SIMCONNECT_CLOUD_STATE_ARRAY_WIDTH") = SIMCONNECT_CLOUD_STATE_ARRAY_WIDTH;
	scope().attr("SIMCONNECT_CLOUD_STATE_ARRAY_SIZE") = SIMCONNECT_CLOUD_STATE_ARRAY_SIZE;

//----------------------------------------------------------------------------
//        Enum definitions
//----------------------------------------------------------------------------
	boost::python::enum_<SIMCONNECT_RECV_ID>("SIMCONNECT_RECV_ID").value("SIMCONNECT_RECV_ID_NULL", SIMCONNECT_RECV_ID_NULL).value(
			"SIMCONNECT_RECV_ID_EXCEPTION", SIMCONNECT_RECV_ID_EXCEPTION).value("SIMCONNECT_RECV_ID_OPEN", SIMCONNECT_RECV_ID_OPEN).value(
			"SIMCONNECT_RECV_ID_QUIT", SIMCONNECT_RECV_ID_QUIT).value("SIMCONNECT_RECV_ID_EVENT", SIMCONNECT_RECV_ID_EVENT).value(
			"SIMCONNECT_RECV_ID_EVENT_OBJECT_ADDREMOVE", SIMCONNECT_RECV_ID_EVENT_OBJECT_ADDREMOVE).value(
			"SIMCONNECT_RECV_ID_EVENT_FILENAME", SIMCONNECT_RECV_ID_EVENT_FILENAME).value("SIMCONNECT_RECV_ID_EVENT_FRAME",
			SIMCONNECT_RECV_ID_EVENT_FRAME).value("SIMCONNECT_RECV_ID_SIMOBJECT_DATA", SIMCONNECT_RECV_ID_SIMOBJECT_DATA).value(
			"SIMCONNECT_RECV_ID_SIMOBJECT_DATA_BYTYPE", SIMCONNECT_RECV_ID_SIMOBJECT_DATA_BYTYPE).value(
			"SIMCONNECT_RECV_ID_WEATHER_OBSERVATION", SIMCONNECT_RECV_ID_WEATHER_OBSERVATION).value("SIMCONNECT_RECV_ID_CLOUD_STATE",
			SIMCONNECT_RECV_ID_CLOUD_STATE).value("SIMCONNECT_RECV_ID_ASSIGNED_OBJECT_ID", SIMCONNECT_RECV_ID_ASSIGNED_OBJECT_ID).value(
			"SIMCONNECT_RECV_ID_RESERVED_KEY", SIMCONNECT_RECV_ID_RESERVED_KEY).value("SIMCONNECT_RECV_ID_CUSTOM_ACTION",
			SIMCONNECT_RECV_ID_CUSTOM_ACTION).value("SIMCONNECT_RECV_ID_SYSTEM_STATE", SIMCONNECT_RECV_ID_SYSTEM_STATE).value(
			"SIMCONNECT_RECV_ID_CLIENT_DATA", SIMCONNECT_RECV_ID_CLIENT_DATA).value("SIMCONNECT_RECV_ID_EVENT_WEATHER_MODE",
			SIMCONNECT_RECV_ID_EVENT_WEATHER_MODE).value("SIMCONNECT_RECV_ID_AIRPORT_LIST", SIMCONNECT_RECV_ID_AIRPORT_LIST).value(
			"SIMCONNECT_RECV_ID_VOR_LIST", SIMCONNECT_RECV_ID_VOR_LIST).value("SIMCONNECT_RECV_ID_NDB_LIST", SIMCONNECT_RECV_ID_NDB_LIST).value(
			"SIMCONNECT_RECV_ID_WAYPOINT_LIST", SIMCONNECT_RECV_ID_WAYPOINT_LIST).value(
			"SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_SERVER_STARTED", SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_SERVER_STARTED).value(
			"SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_CLIENT_STARTED", SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_CLIENT_STARTED).value(
			"SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_SESSION_ENDED", SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_SESSION_ENDED).value(
			"SIMCONNECT_RECV_ID_EVENT_RACE_END", SIMCONNECT_RECV_ID_EVENT_RACE_END).value("SIMCONNECT_RECV_ID_EVENT_RACE_LAP",
			SIMCONNECT_RECV_ID_EVENT_RACE_LAP).value("SIMCONNECT_RECV_ID_OBSERVER_DATA", SIMCONNECT_RECV_ID_OBSERVER_DATA).value(
			"SIMCONNECT_RECV_ID_GROUND_INFO", SIMCONNECT_RECV_ID_GROUND_INFO).value("SIMCONNECT_RECV_ID_SYNCHRONOUS_BLOCK",
			SIMCONNECT_RECV_ID_SYNCHRONOUS_BLOCK).value("SIMCONNECT_RECV_ID_EXTERNAL_SIM_CREATE", SIMCONNECT_RECV_ID_EXTERNAL_SIM_CREATE).value(
			"SIMCONNECT_RECV_ID_EXTERNAL_SIM_DESTROY", SIMCONNECT_RECV_ID_EXTERNAL_SIM_DESTROY).value(
			"SIMCONNECT_RECV_ID_EXTERNAL_SIM_SIMULATE", SIMCONNECT_RECV_ID_EXTERNAL_SIM_SIMULATE).value(
			"SIMCONNECT_RECV_ID_EXTERNAL_SIM_LOCATION_CHANGED", SIMCONNECT_RECV_ID_EXTERNAL_SIM_LOCATION_CHANGED).value(
			"SIMCONNECT_RECV_ID_EXTERNAL_SIM_EVENT", SIMCONNECT_RECV_ID_EXTERNAL_SIM_EVENT).value("SIMCONNECT_RECV_ID_EVENT_WEAPON",
			SIMCONNECT_RECV_ID_EVENT_WEAPON).value("SIMCONNECT_RECV_ID_EVENT_COUNTERMEASURE", SIMCONNECT_RECV_ID_EVENT_COUNTERMEASURE).value(
			"SIMCONNECT_RECV_ID_EVENT_OBJECT_DAMAGED_BY_WEAPON", SIMCONNECT_RECV_ID_EVENT_OBJECT_DAMAGED_BY_WEAPON).value(
			"SIMCONNECT_RECV_ID_VERSION", SIMCONNECT_RECV_ID_VERSION).value("SIMCONNECT_RECV_ID_SCENERY_COMPLEXITY",
			SIMCONNECT_RECV_ID_SCENERY_COMPLEXITY).value("SIMCONNECT_RECV_ID_SHADOW_FLAGS", SIMCONNECT_RECV_ID_SHADOW_FLAGS).value(
			"SIMCONNECT_RECV_ID_TACAN_LIST", SIMCONNECT_RECV_ID_TACAN_LIST).value("SIMCONNECT_RECV_ID_CAMERA_6DOF",
			SIMCONNECT_RECV_ID_CAMERA_6DOF).value("SIMCONNECT_RECV_ID_CAMERA_FOV", SIMCONNECT_RECV_ID_CAMERA_FOV).value(
			"SIMCONNECT_RECV_ID_CAMERA_SENSOR_MODE", SIMCONNECT_RECV_ID_CAMERA_SENSOR_MODE).value(
			"SIMCONNECT_RECV_ID_CAMERA_WINDOW_POSITION", SIMCONNECT_RECV_ID_CAMERA_WINDOW_POSITION).value(
			"SIMCONNECT_RECV_ID_CAMERA_WINDOW_SIZE", SIMCONNECT_RECV_ID_CAMERA_WINDOW_SIZE).value("SIMCONNECT_RECV_ID_MISSION_OBJECT_COUNT",
			SIMCONNECT_RECV_ID_MISSION_OBJECT_COUNT).value("SIMCONNECT_RECV_ID_GOAL", SIMCONNECT_RECV_ID_GOAL).value(
			"SIMCONNECT_RECV_ID_MISSION_OBJECTIVE", SIMCONNECT_RECV_ID_MISSION_OBJECTIVE).value("SIMCONNECT_RECV_ID_FLIGHT_SEGMENT",
			SIMCONNECT_RECV_ID_FLIGHT_SEGMENT).value("SIMCONNECT_RECV_ID_PARAMETER_RANGE", SIMCONNECT_RECV_ID_PARAMETER_RANGE).value(
			"SIMCONNECT_RECV_ID_FLIGHT_SEGMENT_READY_FOR_GRADING", SIMCONNECT_RECV_ID_FLIGHT_SEGMENT_READY_FOR_GRADING).value(
			"SIMCONNECT_RECV_ID_GOAL_PAIR", SIMCONNECT_RECV_ID_GOAL_PAIR).value("SIMCONNECT_RECV_ID_EVENT_FLIGHT_ANALYSIS_DIAGRAMS",
			SIMCONNECT_RECV_ID_EVENT_FLIGHT_ANALYSIS_DIAGRAMS).value("SIMCONNECT_RECV_ID_LANDING_TRIGGER_INFO",
			SIMCONNECT_RECV_ID_LANDING_TRIGGER_INFO).value("SIMCONNECT_RECV_ID_LANDING_INFO", SIMCONNECT_RECV_ID_LANDING_INFO).value(
			"SIMCONNECT_RECV_ID_SESSION_DURATION", SIMCONNECT_RECV_ID_SESSION_DURATION);

	boost::python::enum_<SIMCONNECT_DATATYPE>("SIMCONNECT_DATATYPE").value("SIMCONNECT_DATATYPE_INVALID", SIMCONNECT_DATATYPE_INVALID).value(
			"SIMCONNECT_DATATYPE_INT32", SIMCONNECT_DATATYPE_INT32).value("SIMCONNECT_DATATYPE_INT64", SIMCONNECT_DATATYPE_INT64).value(
			"SIMCONNECT_DATATYPE_FLOAT32", SIMCONNECT_DATATYPE_FLOAT32).value("SIMCONNECT_DATATYPE_FLOAT64", SIMCONNECT_DATATYPE_FLOAT64).value(
			"SIMCONNECT_DATATYPE_STRING8", SIMCONNECT_DATATYPE_STRING8).value("SIMCONNECT_DATATYPE_STRING32", SIMCONNECT_DATATYPE_STRING32).value(
			"SIMCONNECT_DATATYPE_STRING64", SIMCONNECT_DATATYPE_STRING64).value("SIMCONNECT_DATATYPE_STRING128",
			SIMCONNECT_DATATYPE_STRING128).value("SIMCONNECT_DATATYPE_STRING256", SIMCONNECT_DATATYPE_STRING256).value(
			"SIMCONNECT_DATATYPE_STRING260", SIMCONNECT_DATATYPE_STRING260).value("SIMCONNECT_DATATYPE_STRINGV",
			SIMCONNECT_DATATYPE_STRINGV).value("SIMCONNECT_DATATYPE_INITPOSITION", SIMCONNECT_DATATYPE_INITPOSITION).value(
			"SIMCONNECT_DATATYPE_MARKERSTATE", SIMCONNECT_DATATYPE_MARKERSTATE).value("SIMCONNECT_DATATYPE_WAYPOINT",
			SIMCONNECT_DATATYPE_WAYPOINT).value("SIMCONNECT_DATATYPE_LATLONALT", SIMCONNECT_DATATYPE_LATLONALT).value(
			"SIMCONNECT_DATATYPE_XYZ", SIMCONNECT_DATATYPE_XYZ).value("SIMCONNECT_DATATYPE_PBH", SIMCONNECT_DATATYPE_PBH).value(
			"SIMCONNECT_DATATYPE_OBSERVER", SIMCONNECT_DATATYPE_OBSERVER).value("SIMCONNECT_DATATYPE_OBJECT_DAMAGED_BY_WEAPON",
			SIMCONNECT_DATATYPE_OBJECT_DAMAGED_BY_WEAPON);

	boost::python::enum_<SIMCONNECT_EXCEPTION>("SIMCONNECT_EXCEPTION").value("SIMCONNECT_EXCEPTION_NONE", SIMCONNECT_EXCEPTION_NONE).value(
			"SIMCONNECT_EXCEPTION_ERROR", SIMCONNECT_EXCEPTION_ERROR).value("SIMCONNECT_EXCEPTION_SIZE_MISMATCH",
			SIMCONNECT_EXCEPTION_SIZE_MISMATCH).value("SIMCONNECT_EXCEPTION_UNRECOGNIZED_ID", SIMCONNECT_EXCEPTION_UNRECOGNIZED_ID).value(
			"SIMCONNECT_EXCEPTION_UNOPENED", SIMCONNECT_EXCEPTION_UNOPENED).value("SIMCONNECT_EXCEPTION_VERSION_MISMATCH",
			SIMCONNECT_EXCEPTION_VERSION_MISMATCH).value("SIMCONNECT_EXCEPTION_TOO_MANY_GROUPS", SIMCONNECT_EXCEPTION_TOO_MANY_GROUPS).value(
			"SIMCONNECT_EXCEPTION_NAME_UNRECOGNIZED", SIMCONNECT_EXCEPTION_NAME_UNRECOGNIZED).value(
			"SIMCONNECT_EXCEPTION_TOO_MANY_EVENT_NAMES", SIMCONNECT_EXCEPTION_TOO_MANY_EVENT_NAMES).value(
			"SIMCONNECT_EXCEPTION_EVENT_ID_DUPLICATE", SIMCONNECT_EXCEPTION_EVENT_ID_DUPLICATE).value("SIMCONNECT_EXCEPTION_TOO_MANY_MAPS",
			SIMCONNECT_EXCEPTION_TOO_MANY_MAPS).value("SIMCONNECT_EXCEPTION_TOO_MANY_OBJECTS", SIMCONNECT_EXCEPTION_TOO_MANY_OBJECTS).value(
			"SIMCONNECT_EXCEPTION_TOO_MANY_REQUESTS", SIMCONNECT_EXCEPTION_TOO_MANY_REQUESTS).value(
			"SIMCONNECT_EXCEPTION_WEATHER_INVALID_PORT", SIMCONNECT_EXCEPTION_WEATHER_INVALID_PORT).value(
			"SIMCONNECT_EXCEPTION_WEATHER_INVALID_METAR", SIMCONNECT_EXCEPTION_WEATHER_INVALID_METAR).value(
			"SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_GET_OBSERVATION", SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_GET_OBSERVATION).value(
			"SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_CREATE_STATION", SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_CREATE_STATION).value(
			"SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_REMOVE_STATION", SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_REMOVE_STATION).value(
			"SIMCONNECT_EXCEPTION_INVALID_DATA_TYPE", SIMCONNECT_EXCEPTION_INVALID_DATA_TYPE).value(
			"SIMCONNECT_EXCEPTION_INVALID_DATA_SIZE", SIMCONNECT_EXCEPTION_INVALID_DATA_SIZE).value("SIMCONNECT_EXCEPTION_DATA_ERROR",
			SIMCONNECT_EXCEPTION_DATA_ERROR).value("SIMCONNECT_EXCEPTION_INVALID_ARRAY", SIMCONNECT_EXCEPTION_INVALID_ARRAY).value(
			"SIMCONNECT_EXCEPTION_CREATE_OBJECT_FAILED", SIMCONNECT_EXCEPTION_CREATE_OBJECT_FAILED).value(
			"SIMCONNECT_EXCEPTION_LOAD_FLIGHTPLAN_FAILED", SIMCONNECT_EXCEPTION_LOAD_FLIGHTPLAN_FAILED).value(
			"SIMCONNECT_EXCEPTION_OPERATION_INVALID_FOR_OBJECT_TYPE", SIMCONNECT_EXCEPTION_OPERATION_INVALID_FOR_OBJECT_TYPE).value(
			"SIMCONNECT_EXCEPTION_ILLEGAL_OPERATION", SIMCONNECT_EXCEPTION_ILLEGAL_OPERATION).value(
			"SIMCONNECT_EXCEPTION_ALREADY_SUBSCRIBED", SIMCONNECT_EXCEPTION_ALREADY_SUBSCRIBED).value("SIMCONNECT_EXCEPTION_INVALID_ENUM",
			SIMCONNECT_EXCEPTION_INVALID_ENUM).value("SIMCONNECT_EXCEPTION_DEFINITION_ERROR", SIMCONNECT_EXCEPTION_DEFINITION_ERROR).value(
			"SIMCONNECT_EXCEPTION_DUPLICATE_ID", SIMCONNECT_EXCEPTION_DUPLICATE_ID).value("SIMCONNECT_EXCEPTION_DATUM_ID",
			SIMCONNECT_EXCEPTION_DATUM_ID).value("SIMCONNECT_EXCEPTION_OUT_OF_BOUNDS", SIMCONNECT_EXCEPTION_OUT_OF_BOUNDS).value(
			"SIMCONNECT_EXCEPTION_ALREADY_CREATED", SIMCONNECT_EXCEPTION_ALREADY_CREATED).value(
			"SIMCONNECT_EXCEPTION_OBJECT_OUTSIDE_REALITY_BUBBLE", SIMCONNECT_EXCEPTION_OBJECT_OUTSIDE_REALITY_BUBBLE).value(
			"SIMCONNECT_EXCEPTION_OBJECT_CONTAINER", SIMCONNECT_EXCEPTION_OBJECT_CONTAINER).value("SIMCONNECT_EXCEPTION_OBJECT_AI",
			SIMCONNECT_EXCEPTION_OBJECT_AI).value("SIMCONNECT_EXCEPTION_OBJECT_ATC", SIMCONNECT_EXCEPTION_OBJECT_ATC).value(
			"SIMCONNECT_EXCEPTION_OBJECT_SCHEDULE", SIMCONNECT_EXCEPTION_OBJECT_SCHEDULE).value("SIMCONNECT_EXCEPTION_BLOCK_TIMEOUT",
			SIMCONNECT_EXCEPTION_BLOCK_TIMEOUT);

	boost::python::enum_<SIMCONNECT_SIMOBJECT_TYPE>("SIMCONNECT_SIMOBJECT_TYPE").value("SIMCONNECT_SIMOBJECT_TYPE_USER",
			SIMCONNECT_SIMOBJECT_TYPE_USER).value("SIMCONNECT_SIMOBJECT_TYPE_ALL", SIMCONNECT_SIMOBJECT_TYPE_ALL).value(
			"SIMCONNECT_SIMOBJECT_TYPE_AIRPLANE", SIMCONNECT_SIMOBJECT_TYPE_AIRPLANE).value("SIMCONNECT_SIMOBJECT_TYPE_HELICOPTER",
			SIMCONNECT_SIMOBJECT_TYPE_HELICOPTER).value("SIMCONNECT_SIMOBJECT_TYPE_BOAT", SIMCONNECT_SIMOBJECT_TYPE_BOAT).value(
			"SIMCONNECT_SIMOBJECT_TYPE_GROUND", SIMCONNECT_SIMOBJECT_TYPE_GROUND).value("SIMCONNECT_SIMOBJECT_TYPE_WEAPON",
			SIMCONNECT_SIMOBJECT_TYPE_WEAPON);

	boost::python::enum_<SIMCONNECT_STATE>("SIMCONNECT_STATE").value("SIMCONNECT_STATE_OFF", SIMCONNECT_STATE_OFF).value(
			"SIMCONNECT_STATE_ON", SIMCONNECT_STATE_ON);

	boost::python::enum_<SIMCONNECT_PERIOD>("SIMCONNECT_PERIOD").value("SIMCONNECT_PERIOD_NEVER", SIMCONNECT_PERIOD_NEVER).value(
			"SIMCONNECT_PERIOD_ONCE", SIMCONNECT_PERIOD_ONCE).value("SIMCONNECT_PERIOD_VISUAL_FRAME", SIMCONNECT_PERIOD_VISUAL_FRAME).value(
			"SIMCONNECT_PERIOD_SIM_FRAME", SIMCONNECT_PERIOD_SIM_FRAME).value("SIMCONNECT_PERIOD_SECOND", SIMCONNECT_PERIOD_SECOND);

	boost::python::enum_<SIMCONNECT_CLIENT_DATA_PERIOD>("SIMCONNECT_CLIENT_DATA_PERIOD").value("SIMCONNECT_CLIENT_DATA_PERIOD_NEVER",
			SIMCONNECT_CLIENT_DATA_PERIOD_NEVER).value("SIMCONNECT_CLIENT_DATA_PERIOD_ONCE", SIMCONNECT_CLIENT_DATA_PERIOD_ONCE).value(
			"SIMCONNECT_CLIENT_DATA_PERIOD_VISUAL_FRAME", SIMCONNECT_CLIENT_DATA_PERIOD_VISUAL_FRAME).value(
			"SIMCONNECT_CLIENT_DATA_PERIOD_ON_SET", SIMCONNECT_CLIENT_DATA_PERIOD_ON_SET).value("SIMCONNECT_CLIENT_DATA_PERIOD_SECOND",
			SIMCONNECT_CLIENT_DATA_PERIOD_SECOND);

	boost::python::enum_<SIMCONNECT_MISSION_END>("SIMCONNECT_MISSION_END").value("SIMCONNECT_MISSION_FAILED", SIMCONNECT_MISSION_FAILED).value(
			"SIMCONNECT_MISSION_CRASHED", SIMCONNECT_MISSION_CRASHED);

	boost::python::enum_<SIMCONNECT_TEXT_TYPE>("SIMCONNECT_TEXT_TYPE").value("SIMCONNECT_TEXT_TYPE_SCROLL_BLACK",
			SIMCONNECT_TEXT_TYPE_SCROLL_BLACK).value("SIMCONNECT_TEXT_TYPE_SCROLL_WHITE", SIMCONNECT_TEXT_TYPE_SCROLL_WHITE).value(
			"SIMCONNECT_TEXT_TYPE_SCROLL_RED", SIMCONNECT_TEXT_TYPE_SCROLL_RED).value("SIMCONNECT_TEXT_TYPE_SCROLL_GREEN",
			SIMCONNECT_TEXT_TYPE_SCROLL_GREEN).value("SIMCONNECT_TEXT_TYPE_SCROLL_BLUE", SIMCONNECT_TEXT_TYPE_SCROLL_BLUE).value(
			"SIMCONNECT_TEXT_TYPE_SCROLL_YELLOW", SIMCONNECT_TEXT_TYPE_SCROLL_YELLOW).value("SIMCONNECT_TEXT_TYPE_SCROLL_MAGENTA",
			SIMCONNECT_TEXT_TYPE_SCROLL_MAGENTA).value("SIMCONNECT_TEXT_TYPE_SCROLL_CYAN", SIMCONNECT_TEXT_TYPE_SCROLL_CYAN).value(
			"SIMCONNECT_TEXT_TYPE_PRINT_WHITE", SIMCONNECT_TEXT_TYPE_PRINT_WHITE).value("SIMCONNECT_TEXT_TYPE_PRINT_RED",
			SIMCONNECT_TEXT_TYPE_PRINT_RED).value("SIMCONNECT_TEXT_TYPE_PRINT_GREEN", SIMCONNECT_TEXT_TYPE_PRINT_GREEN).value(
			"SIMCONNECT_TEXT_TYPE_PRINT_BLUE", SIMCONNECT_TEXT_TYPE_PRINT_BLUE).value("SIMCONNECT_TEXT_TYPE_PRINT_YELLOW",
			SIMCONNECT_TEXT_TYPE_PRINT_YELLOW).value("SIMCONNECT_TEXT_TYPE_PRINT_MAGENTA", SIMCONNECT_TEXT_TYPE_PRINT_MAGENTA).value(
			"SIMCONNECT_TEXT_TYPE_PRINT_CYAN", SIMCONNECT_TEXT_TYPE_PRINT_CYAN);

	boost::python::enum_<SIMCONNECT_TEXT_RESULT>("SIMCONNECT_TEXT_RESULT").value("SIMCONNECT_TEXT_RESULT_MENU_SELECT_1",
			SIMCONNECT_TEXT_RESULT_MENU_SELECT_1).value("SIMCONNECT_TEXT_RESULT_MENU_SELECT_2", SIMCONNECT_TEXT_RESULT_MENU_SELECT_2).value(
			"SIMCONNECT_TEXT_RESULT_MENU_SELECT_3", SIMCONNECT_TEXT_RESULT_MENU_SELECT_3).value("SIMCONNECT_TEXT_RESULT_MENU_SELECT_4",
			SIMCONNECT_TEXT_RESULT_MENU_SELECT_4).value("SIMCONNECT_TEXT_RESULT_MENU_SELECT_5", SIMCONNECT_TEXT_RESULT_MENU_SELECT_5).value(
			"SIMCONNECT_TEXT_RESULT_MENU_SELECT_6", SIMCONNECT_TEXT_RESULT_MENU_SELECT_6).value("SIMCONNECT_TEXT_RESULT_MENU_SELECT_7",
			SIMCONNECT_TEXT_RESULT_MENU_SELECT_7).value("SIMCONNECT_TEXT_RESULT_MENU_SELECT_8", SIMCONNECT_TEXT_RESULT_MENU_SELECT_8).value(
			"SIMCONNECT_TEXT_RESULT_MENU_SELECT_9", SIMCONNECT_TEXT_RESULT_MENU_SELECT_9).value("SIMCONNECT_TEXT_RESULT_MENU_SELECT_10",
			SIMCONNECT_TEXT_RESULT_MENU_SELECT_10).value("SIMCONNECT_TEXT_RESULT_QUEUED", SIMCONNECT_TEXT_RESULT_QUEUED).value(
			"SIMCONNECT_TEXT_RESULT_REMOVED", SIMCONNECT_TEXT_RESULT_REMOVED).value("SIMCONNECT_TEXT_RESULT_REPLACED",
			SIMCONNECT_TEXT_RESULT_REPLACED).value("SIMCONNECT_TEXT_RESULT_TIMEOUT", SIMCONNECT_TEXT_RESULT_TIMEOUT);

	boost::python::enum_<SIMCONNECT_WEATHER_MODE>("SIMCONNECT_WEATHER_MODE").value("SIMCONNECT_WEATHER_MODE_THEME",
			SIMCONNECT_WEATHER_MODE_THEME).value("SIMCONNECT_WEATHER_MODE_RWW", SIMCONNECT_WEATHER_MODE_RWW).value(
			"SIMCONNECT_WEATHER_MODE_CUSTOM", SIMCONNECT_WEATHER_MODE_CUSTOM).value("SIMCONNECT_WEATHER_MODE_GLOBAL",
			SIMCONNECT_WEATHER_MODE_GLOBAL);

	boost::python::enum_<SIMCONNECT_FACILITY_LIST_TYPE>("SIMCONNECT_FACILITY_LIST_TYPE").value("SIMCONNECT_FACILITY_LIST_TYPE_AIRPORT",
			SIMCONNECT_FACILITY_LIST_TYPE_AIRPORT).value("SIMCONNECT_FACILITY_LIST_TYPE_WAYPOINT", SIMCONNECT_FACILITY_LIST_TYPE_WAYPOINT).value(
			"SIMCONNECT_FACILITY_LIST_TYPE_NDB", SIMCONNECT_FACILITY_LIST_TYPE_NDB).value("SIMCONNECT_FACILITY_LIST_TYPE_VOR",
			SIMCONNECT_FACILITY_LIST_TYPE_VOR).value("SIMCONNECT_FACILITY_LIST_TYPE_TACAN", SIMCONNECT_FACILITY_LIST_TYPE_TACAN);

	boost::python::enum_<SIMCONNECT_CAMERA_TYPE>("SIMCONNECT_CAMERA_TYPE").value("SIMCONNECT_CAMERA_TYPE_OBJECT_PANEL",
			SIMCONNECT_CAMERA_TYPE_OBJECT_PANEL).value("SIMCONNECT_CAMERA_TYPE_OBJECT_VIRTUAL", SIMCONNECT_CAMERA_TYPE_OBJECT_VIRTUAL).value(
			"SIMCONNECT_CAMERA_TYPE_OBJECT_CENTER", SIMCONNECT_CAMERA_TYPE_OBJECT_CENTER).value("SIMCONNECT_CAMERA_TYPE_OBJECT_PILOT",
			SIMCONNECT_CAMERA_TYPE_OBJECT_PILOT).value("SIMCONNECT_CAMERA_TYPE_TOWER", SIMCONNECT_CAMERA_TYPE_TOWER).value(
			"SIMCONNECT_CAMERA_TYPE_FIXED", SIMCONNECT_CAMERA_TYPE_FIXED).value("SIMCONNECT_CAMERA_TYPE_WORLD_OBJECT",
			SIMCONNECT_CAMERA_TYPE_WORLD_OBJECT).value("SIMCONNECT_CAMERA_TYPE_LATLONALT_ORTHOGONAL",
			SIMCONNECT_CAMERA_TYPE_LATLONALT_ORTHOGONAL).value("SIMCONNECT_CAMERA_TYPE_OBJECT_AI_VIRTUAL",
			SIMCONNECT_CAMERA_TYPE_OBJECT_AI_VIRTUAL);

//----------------------------------------------------------------------------
//        Struct definitions
//----------------------------------------------------------------------------

	boost::python::class_<SIMCONNECT_RECV>("SIMCONNECT_RECV")
	// record size
	.add_property("dwSize", &SIMCONNECT_RECV::dwSize)
	// interface version
	.add_property("dwVersion", &SIMCONNECT_RECV::dwVersion)
	// see SIMCONNECT_RECV_ID
	.add_property("dwID", &SIMCONNECT_RECV::dwID);

	// when dwID == SIMCONNECT_RECV_ID_EVENT
	boost::python::class_<SIMCONNECT_RECV_EVENT_BASE, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_EVENT_BASE").def_readonly("UNKNOWN_GROUP",
			SIMCONNECT_RECV_EVENT_BASE::UNKNOWN_GROUP).add_property("uGroupID", &SIMCONNECT_RECV_EVENT_BASE::uGroupID).add_property(
			"uEventID", &SIMCONNECT_RECV_EVENT_BASE::uEventID)
	// uEventID-dependent context
	.add_property("dwData", &SIMCONNECT_RECV_EVENT_BASE::dwData);

	// when dwID == SIMCONNECT_RECV_ID_EVENT
	boost::python::class_<SIMCONNECT_RECV_EVENT, bases<SIMCONNECT_RECV_EVENT_BASE> >("SIMCONNECT_RECV_EVENT").add_property("dwFlags",
			&SIMCONNECT_RECV_EVENT::dwFlags);

	// when dwID == SIMCONNECT_RECV_ID_EXCEPTION
	boost::python::class_<SIMCONNECT_RECV_EXCEPTION, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_EXCEPTION")
	// see SIMCONNECT_EXCEPTION
	.add_property("dwException", &SIMCONNECT_RECV_EXCEPTION::dwException).def_readonly("UNKNOWN_SENDID",
			SIMCONNECT_RECV_EXCEPTION::UNKNOWN_SENDID)
	// see SimConnect_GetLastSentPacketID
	.add_property("dwSendID", &SIMCONNECT_RECV_EXCEPTION::dwSendID).def_readonly("UNKNOWN_INDEX", SIMCONNECT_RECV_EXCEPTION::UNKNOWN_INDEX)
	// index of parameter that was source of error
	.add_property("dwIndex", &SIMCONNECT_RECV_EXCEPTION::dwIndex);

	// when dwID == SIMCONNECT_RECV_ID_OPEN
	boost::python::class_<SIMCONNECT_RECV_OPEN, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_OPEN").add_property("szApplicationName",
			&SIMCONNECT_RECV_OPEN::szApplicationName).add_property("dwApplicationVersionMajor",
			&SIMCONNECT_RECV_OPEN::dwApplicationVersionMajor).add_property("dwApplicationVersionMinor",
			&SIMCONNECT_RECV_OPEN::dwApplicationVersionMinor).add_property("dwApplicationBuildMajor",
			&SIMCONNECT_RECV_OPEN::dwApplicationBuildMajor).add_property("dwApplicationBuildMinor",
			&SIMCONNECT_RECV_OPEN::dwApplicationBuildMinor).add_property("dwSimConnectVersionMajor",
			&SIMCONNECT_RECV_OPEN::dwSimConnectVersionMajor).add_property("dwSimConnectVersionMinor",
			&SIMCONNECT_RECV_OPEN::dwSimConnectVersionMinor).add_property("dwSimConnectBuildMajor",
			&SIMCONNECT_RECV_OPEN::dwSimConnectBuildMajor).add_property("dwSimConnectBuildMinor",
			&SIMCONNECT_RECV_OPEN::dwSimConnectBuildMinor).add_property("dwReserved1", &SIMCONNECT_RECV_OPEN::dwReserved1).add_property(
			"dwReserved2", &SIMCONNECT_RECV_OPEN::dwReserved2);

	// when dwID == SIMCONNECT_RECV_ID_QUIT
	boost::python::class_<SIMCONNECT_RECV_QUIT, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_QUIT");

	// when dwID == SIMCONNECT_RECV_ID_EVENT_FILENAME
	boost::python::class_<SIMCONNECT_RECV_EVENT_FILENAME, bases<SIMCONNECT_RECV_EVENT_BASE> >("SIMCONNECT_RECV_EVENT_FILENAME")
	// uEventID-dependent context
	.add_property("szFileName", &SIMCONNECT_RECV_EVENT_FILENAME::szFileName).add_property("dwFlags",
			&SIMCONNECT_RECV_EVENT_FILENAME::dwFlags);

	// when dwID == SIMCONNECT_RECV_ID_EVENT_FILENAME
	boost::python::class_<SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE, bases<SIMCONNECT_RECV_EVENT_BASE> >(
			"SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE").add_property("eObjType", &SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE::eObjType).add_property(
			"dwFlags", &SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE::dwFlags);

	// when dwID == SIMCONNECT_RECV_ID_EVENT_FRAME
	boost::python::class_<SIMCONNECT_RECV_EVENT_FRAME, bases<SIMCONNECT_RECV_EVENT_BASE> >("SIMCONNECT_RECV_EVENT_FRAME").add_property(
			"fFrameRate", &SIMCONNECT_RECV_EVENT_FRAME::fFrameRate).add_property("fSimSpeed", &SIMCONNECT_RECV_EVENT_FRAME::fSimSpeed).add_property(
			"dwFlags", &SIMCONNECT_RECV_EVENT_FRAME::dwFlags);

	// when dwID == SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_SERVER_STARTED
	boost::python::class_<SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED, bases<SIMCONNECT_RECV_EVENT> >(
			"SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED");

	// when dwID == SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_CLIENT_STARTED
	boost::python::class_<SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED, bases<SIMCONNECT_RECV_EVENT> >(
			"SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED");

	// when dwID == SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_SESSION_ENDED
	boost::python::class_<SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED, bases<SIMCONNECT_RECV_EVENT> >(
			"SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED");

	boost::python::class_<SIMCONNECT_DATA_LATLONALT>("SIMCONNECT_DATA_LATLONALT").add_property("Latitude",
			&SIMCONNECT_DATA_LATLONALT::Latitude).add_property("Longitude", &SIMCONNECT_DATA_LATLONALT::Longitude).add_property("Altitude",
			&SIMCONNECT_DATA_LATLONALT::Altitude);

	boost::python::class_<SIMCONNECT_DATA_RACE_RESULT>("SIMCONNECT_DATA_RACE_RESULT")
	// The total number of racers
	.add_property("dwNumberOfRacers", &SIMCONNECT_DATA_RACE_RESULT::dwNumberOfRacers)
	// The name of the mission to execute, NULL if no mission
	.add_property("MissionGUID", &SIMCONNECT_DATA_RACE_RESULT::MissionGUID)
	// The name of the player
	.add_property("szPlayerName", &SIMCONNECT_DATA_RACE_RESULT::szPlayerName)
	// The type of the multiplayer session: "LAN", "GAMESPY")
	.add_property("szSessionType", &SIMCONNECT_DATA_RACE_RESULT::szSessionType)
	// The aircraft type
	.add_property("szAircraft", &SIMCONNECT_DATA_RACE_RESULT::szAircraft)
	// The player role in the mission
	.add_property("szPlayerRole", &SIMCONNECT_DATA_RACE_RESULT::szPlayerRole)
	// Total time in seconds, 0 means DNF
	.add_property("fTotalTime", &SIMCONNECT_DATA_RACE_RESULT::fTotalTime)
	// Total penalty time in seconds
	.add_property("fPenaltyTime", &SIMCONNECT_DATA_RACE_RESULT::fPenaltyTime)
	// non 0 - disqualified, 0 - not disqualified
	.add_property("dwIsDisqualified", &SIMCONNECT_DATA_RACE_RESULT::dwIsDisqualified);

	// when dwID == SIMCONNECT_RECV_ID_EVENT_RACE_END
	boost::python::class_<SIMCONNECT_RECV_EVENT_RACE_END, bases<SIMCONNECT_RECV_EVENT_BASE> >("SIMCONNECT_RECV_EVENT_RACE_END")
	// The index of the racer the results are for
	.add_property("dwRacerNumber", &SIMCONNECT_RECV_EVENT_RACE_END::dwRacerNumber).add_property("RacerData",
			&SIMCONNECT_RECV_EVENT_RACE_END::RacerData).add_property("dwFlags", &SIMCONNECT_RECV_EVENT_RACE_END::dwFlags);

	// when dwID == SIMCONNECT_RECV_ID_EVENT_RACE_LAP
	boost::python::class_<SIMCONNECT_RECV_EVENT_RACE_LAP, bases<SIMCONNECT_RECV_EVENT_BASE> >("SIMCONNECT_RECV_EVENT_RACE_LAP")
	// The index of the lap the results are for
	.add_property("dwLapIndex", &SIMCONNECT_RECV_EVENT_RACE_LAP::dwLapIndex).add_property("RacerData",
			&SIMCONNECT_RECV_EVENT_RACE_LAP::RacerData).add_property("dwFlags", &SIMCONNECT_RECV_EVENT_RACE_LAP::dwFlags);

	// when dwID == SIMCONNECT_RECV_ID_EVENT_WEAPON_FIRED or SIMCONNECT_RECV_ID_EVENT_WEAPON_DETONATED
	boost::python::class_<SIMCONNECT_RECV_EVENT_WEAPON, bases<SIMCONNECT_RECV_EVENT_BASE> >("SIMCONNECT_RECV_EVENT_WEAPON").add_property(
			"dwRequestID", &SIMCONNECT_RECV_EVENT_WEAPON::dwRequestID).add_property("szWeaponTitle",
			&SIMCONNECT_RECV_EVENT_WEAPON::szWeaponTitle).add_property("szWeaponType", &SIMCONNECT_RECV_EVENT_WEAPON::szWeaponType).add_property(
			"dwObjectID", &SIMCONNECT_RECV_EVENT_WEAPON::dwObjectID).add_property("dwAttackerID",
			&SIMCONNECT_RECV_EVENT_WEAPON::dwAttackerID).add_property("dwTargetID", &SIMCONNECT_RECV_EVENT_WEAPON::dwTargetID).add_property(
			"llaPosition", &SIMCONNECT_RECV_EVENT_WEAPON::llaPosition).add_property("dwResult", &SIMCONNECT_RECV_EVENT_WEAPON::dwResult).add_property(
			"dwFlags", &SIMCONNECT_RECV_EVENT_WEAPON::dwFlags);

	boost::python::class_<SIMCONNECT_DATA_OBJECT_DAMAGED_BY_WEAPON>("SIMCONNECT_DATA_OBJECT_DAMAGED_BY_WEAPON")
	//Weapon ID
	.add_property("dwWeaponID", &SIMCONNECT_DATA_OBJECT_DAMAGED_BY_WEAPON::dwWeaponID)
	//Attacker ID
	.add_property("dwAttackerID", &SIMCONNECT_DATA_OBJECT_DAMAGED_BY_WEAPON::dwAttackerID)
	//Target ID
	.add_property("dwDamagedObjectID", &SIMCONNECT_DATA_OBJECT_DAMAGED_BY_WEAPON::dwDamagedObjectID);

	// when dwID == SIMCONNECT_RECV_ID_EVENT_OBJECT_DAMAGED_BY_WEAPON
	boost::python::class_<SIMCONNECT_RECV_EVENT_OBJECT_DAMAGED_BY_WEAPON, bases<SIMCONNECT_RECV_EVENT_BASE> >(
			"SIMCONNECT_RECV_EVENT_OBJECT_DAMAGED_BY_WEAPON").add_property("dwRequestID",
			&SIMCONNECT_RECV_EVENT_OBJECT_DAMAGED_BY_WEAPON::dwRequestID).add_property("DamageData",
			&SIMCONNECT_RECV_EVENT_OBJECT_DAMAGED_BY_WEAPON::DamageData).add_property("dwFlags",
			&SIMCONNECT_RECV_EVENT_OBJECT_DAMAGED_BY_WEAPON::dwFlags);

	// when dwID == SIMCONNECT_RECV_ID_EVENT_COUNTERMEASURE_FIRED
	boost::python::class_<SIMCONNECT_RECV_EVENT_COUNTERMEASURE, bases<SIMCONNECT_RECV_EVENT_BASE> >("SIMCONNECT_RECV_EVENT_COUNTERMEASURE").add_property(
			"dwRequestID", &SIMCONNECT_RECV_EVENT_COUNTERMEASURE::dwRequestID).add_property("szCountermeasureName",
			&SIMCONNECT_RECV_EVENT_COUNTERMEASURE::szCountermeasureName).add_property("dwObjectID",
			&SIMCONNECT_RECV_EVENT_COUNTERMEASURE::dwObjectID).add_property("dwAttackerID",
			&SIMCONNECT_RECV_EVENT_COUNTERMEASURE::dwAttackerID).add_property("llaPosition",
			&SIMCONNECT_RECV_EVENT_COUNTERMEASURE::llaPosition).add_property("dwFlags", &SIMCONNECT_RECV_EVENT_COUNTERMEASURE::dwFlags);

	// when dwID == SIMCONNECT_RECV_ID_SIMOBJECT_DATA
	boost::python::class_<SIMCONNECT_RECV_SIMOBJECT_DATA, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_SIMOBJECT_DATA").add_property(
			"dwRequestID", &SIMCONNECT_RECV_SIMOBJECT_DATA::dwRequestID).add_property("dwObjectID",
			&SIMCONNECT_RECV_SIMOBJECT_DATA::dwObjectID).add_property("dwDefineID", &SIMCONNECT_RECV_SIMOBJECT_DATA::dwDefineID)
	// SIMCONNECT_DATA_REQUEST_FLAG
	.add_property("dwFlags", &SIMCONNECT_RECV_SIMOBJECT_DATA::dwFlags)
	// if multiple objects returned, this is number <entrynumber> out of <outof>.
	.add_property("dwentrynumber", &SIMCONNECT_RECV_SIMOBJECT_DATA::dwentrynumber)
	// note: starts with 1, not 0.
	.add_property("dwoutof", &SIMCONNECT_RECV_SIMOBJECT_DATA::dwoutof)
	// data count (number of datums, *not* byte count)
	.add_property("dwDefineCount", &SIMCONNECT_RECV_SIMOBJECT_DATA::dwDefineCount)
	// data begins here, dwDefineCount data items
	.add_property("dwData", &SIMCONNECT_RECV_SIMOBJECT_DATA::dwData);

	// when dwID == SIMCONNECT_RECV_ID_SIMOBJECT_DATA_BYTYPE
	boost::python::class_<SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE, bases<SIMCONNECT_RECV_SIMOBJECT_DATA> >(
			"SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE");

	// when dwID == SIMCONNECT_RECV_ID_CLIENT_DATA
	boost::python::class_<SIMCONNECT_RECV_CLIENT_DATA, bases<SIMCONNECT_RECV_SIMOBJECT_DATA> >("SIMCONNECT_RECV_CLIENT_DATA");

	// when dwID == SIMCONNECT_RECV_ID_SYNCHRONOUS_BLOCK
	boost::python::class_<SIMCONNECT_RECV_SYNCHRONOUS_BLOCK, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_SYNCHRONOUS_BLOCK").add_property(
			"dwRequestID", &SIMCONNECT_RECV_SYNCHRONOUS_BLOCK::dwRequestID)
	// SIMCONNECT_DATA_REQUEST_FLAG
	.add_property("dwFlags", &SIMCONNECT_RECV_SYNCHRONOUS_BLOCK::dwFlags);

	// when dwID == SIMCONNECT_RECV_ID_CAMERA_6DOF
	boost::python::class_<SIMCONNECT_RECV_CAMERA_6DOF, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_CAMERA_6DOF").add_property("dwRequestID",
			&SIMCONNECT_RECV_CAMERA_6DOF::dwRequestID).add_property("fDeltaXMeters", &SIMCONNECT_RECV_CAMERA_6DOF::fDeltaXMeters).add_property(
			"fDeltaYMeters", &SIMCONNECT_RECV_CAMERA_6DOF::fDeltaYMeters).add_property("fDeltaZMeters",
			&SIMCONNECT_RECV_CAMERA_6DOF::fDeltaZMeters).add_property("fPitchDeg", &SIMCONNECT_RECV_CAMERA_6DOF::fPitchDeg).add_property(
			"fBankDeg", &SIMCONNECT_RECV_CAMERA_6DOF::fBankDeg).add_property("fHeadingDeg", &SIMCONNECT_RECV_CAMERA_6DOF::fHeadingDeg);

	// when dwID == SIMCONNECT_RECV_ID_CAMERA_FOV
	boost::python::class_<SIMCONNECT_RECV_CAMERA_FOV, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_CAMERA_FOV").add_property("dwRequestID",
			&SIMCONNECT_RECV_CAMERA_FOV::dwRequestID).add_property("fHorizontalFov", &SIMCONNECT_RECV_CAMERA_FOV::fHorizontalFov).add_property(
			"fVerticalFov", &SIMCONNECT_RECV_CAMERA_FOV::fVerticalFov);

	// when dwID == SIMCONNECT_RECV_ID_CAMERA_SENSOR_MODE
	boost::python::class_<SIMCONNECT_RECV_CAMERA_SENSOR_MODE, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_CAMERA_SENSOR_MODE").add_property(
			"dwRequestID", &SIMCONNECT_RECV_CAMERA_SENSOR_MODE::dwRequestID).add_property("eSensorMode",
			&SIMCONNECT_RECV_CAMERA_SENSOR_MODE::eSensorMode);

	// when dwID == SIMCONNECT_RECV_ID_CAMERA_WINDOW_POSITION
	boost::python::class_<SIMCONNECT_RECV_CAMERA_WINDOW_POSITION, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_CAMERA_WINDOW_POSITION").add_property(
			"dwRequestID", &SIMCONNECT_RECV_CAMERA_WINDOW_POSITION::dwRequestID).add_property("dwXPosition",
			&SIMCONNECT_RECV_CAMERA_WINDOW_POSITION::dwXPosition).add_property("dwYPosition",
			&SIMCONNECT_RECV_CAMERA_WINDOW_POSITION::dwYPosition);

	// when dwID == SIMCONNECT_RECV_ID_CAMERA_WINDOW_SIZE
	boost::python::class_<SIMCONNECT_RECV_CAMERA_WINDOW_SIZE, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_CAMERA_WINDOW_SIZE").add_property(
			"dwRequestID", &SIMCONNECT_RECV_CAMERA_WINDOW_SIZE::dwRequestID).add_property("dwWidth",
			&SIMCONNECT_RECV_CAMERA_WINDOW_SIZE::dwWidth).add_property("dwHeight", &SIMCONNECT_RECV_CAMERA_WINDOW_SIZE::dwHeight);

	// when dwID == SIMCONNECT_RECV_ID_WEATHER_OBSERVATION
	boost::python::class_<SIMCONNECT_RECV_WEATHER_OBSERVATION, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_WEATHER_OBSERVATION").add_property(
			"dwRequestID", &SIMCONNECT_RECV_WEATHER_OBSERVATION::dwRequestID)
	// Variable length string whose maximum size is MAX_METAR_LENGTH
	.add_property("szMetar", &SIMCONNECT_RECV_WEATHER_OBSERVATION::szMetar);

	// when dwID == SIMCONNECT_RECV_ID_CLOUD_STATE
	boost::python::class_<SIMCONNECT_RECV_CLOUD_STATE, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_CLOUD_STATE").add_property("dwRequestID",
			&SIMCONNECT_RECV_CLOUD_STATE::dwRequestID).add_property("dwArraySize", &SIMCONNECT_RECV_CLOUD_STATE::dwArraySize).add_property(
			"rgbData", &SIMCONNECT_RECV_CLOUD_STATE::rgbData);

	// when dwID == SIMCONNECT_RECV_ID_ASSIGNED_OBJECT_ID
	boost::python::class_<SIMCONNECT_RECV_ASSIGNED_OBJECT_ID, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_ASSIGNED_OBJECT_ID").add_property(
			"dwRequestID", &SIMCONNECT_RECV_ASSIGNED_OBJECT_ID::dwRequestID).add_property("dwObjectID",
			&SIMCONNECT_RECV_ASSIGNED_OBJECT_ID::dwObjectID);

	// when dwID == SIMCONNECT_RECV_ID_RESERVED_KEY
	boost::python::class_<SIMCONNECT_RECV_RESERVED_KEY, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_RESERVED_KEY").add_property(
			"szChoiceReserved", &SIMCONNECT_RECV_RESERVED_KEY::szChoiceReserved).add_property("szReservedKey",
			&SIMCONNECT_RECV_RESERVED_KEY::szReservedKey);

	// when dwID == SIMCONNECT_RECV_ID_SYSTEM_STATE
	boost::python::class_<SIMCONNECT_RECV_SYSTEM_STATE, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_SYSTEM_STATE").add_property("dwRequestID",
			&SIMCONNECT_RECV_SYSTEM_STATE::dwRequestID).add_property("dwInteger", &SIMCONNECT_RECV_SYSTEM_STATE::dwInteger).add_property(
			"fFloat", &SIMCONNECT_RECV_SYSTEM_STATE::fFloat).add_property("szString", &SIMCONNECT_RECV_SYSTEM_STATE::szString);

	// when dwID == SIMCONNECT_RECV_ID_VERSION
	boost::python::class_<SIMCONNECT_RECV_VERSION, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_VERSION").add_property("dwRequestID",
			&SIMCONNECT_RECV_VERSION::dwRequestID).add_property("dwApplicationVersionType",
			&SIMCONNECT_RECV_VERSION::dwApplicationVersionType).add_property("dwApplicationVersionMajor",
			&SIMCONNECT_RECV_VERSION::dwApplicationVersionMajor).add_property("dwApplicationVersionMinor",
			&SIMCONNECT_RECV_VERSION::dwApplicationVersionMinor).add_property("dwApplicationBuildMajor",
			&SIMCONNECT_RECV_VERSION::dwApplicationBuildMajor).add_property("dwApplicationBuildMinor",
			&SIMCONNECT_RECV_VERSION::dwApplicationBuildMinor).add_property("dwSimConnectVersionMajor",
			&SIMCONNECT_RECV_VERSION::dwSimConnectVersionMajor).add_property("dwSimConnectVersionMinor",
			&SIMCONNECT_RECV_VERSION::dwSimConnectVersionMinor).add_property("dwSimConnectBuildMajor",
			&SIMCONNECT_RECV_VERSION::dwSimConnectBuildMajor).add_property("dwSimConnectBuildMinor",
			&SIMCONNECT_RECV_VERSION::dwSimConnectBuildMinor);

	// when dwID == SIMCONNECT_RECV_ID_SCENERY_COMPLEXITY
	boost::python::class_<SIMCONNECT_RECV_SCENERY_COMPLEXITY, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_SCENERY_COMPLEXITY").add_property(
			"dwRequestID", &SIMCONNECT_RECV_SCENERY_COMPLEXITY::dwRequestID).add_property("dwSceneryComplexity",
			&SIMCONNECT_RECV_SCENERY_COMPLEXITY::dwSceneryComplexity);

	// when dwID == SIMCONNECT_RECV_ID_SHADOW_FLAGS
	boost::python::class_<SIMCONNECT_RECV_SHADOW_FLAGS, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_SHADOW_FLAGS").add_property("dwRequestID",
			&SIMCONNECT_RECV_SHADOW_FLAGS::dwRequestID).add_property("dwShadowFlags", &SIMCONNECT_RECV_SHADOW_FLAGS::dwShadowFlags);

	boost::python::class_<SIMCONNECT_RECV_CUSTOM_ACTION, bases<SIMCONNECT_RECV_EVENT_BASE> >("SIMCONNECT_RECV_CUSTOM_ACTION")
	// Instance id of the action that executed
	.add_property("guidInstanceId", &SIMCONNECT_RECV_CUSTOM_ACTION::guidInstanceId)
	// Wait for completion flag on the action
	.add_property("dwWaitForCompletion", &SIMCONNECT_RECV_CUSTOM_ACTION::dwWaitForCompletion)
	// Variable length string payload associated with the mission action.
	.add_property("szPayLoad", &SIMCONNECT_RECV_CUSTOM_ACTION::szPayLoad);

	// when dwID == SIMCONNECT_RECV_ID_SESSION_DURATION
	boost::python::class_<SIMCONNECT_RECV_SESSION_DURATION, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_SESSION_DURATION").add_property(
			"dwRequestID", &SIMCONNECT_RECV_SESSION_DURATION::dwRequestID).add_property("dSessionDuration",
			&SIMCONNECT_RECV_SESSION_DURATION::dSessionDuration);

	//when dwID == SIMCONNECT_RECV_ID_GOAL
	boost::python::class_<SIMCONNECT_RECV_GOAL, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_GOAL").add_property("dwRequestID",
			&SIMCONNECT_RECV_GOAL::dwRequestID)
	// Instance id of the goal
	.add_property("guidInstanceID", &SIMCONNECT_RECV_GOAL::guidInstanceID)
	// Whether goal is optional for mission completion
	.add_property("isOptional", &SIMCONNECT_RECV_GOAL::isOptional)
	// Priority order of goal
	.add_property("dwOrder", &SIMCONNECT_RECV_GOAL::dwOrder)
	// Point value of goal
	.add_property("dwPointValue", &SIMCONNECT_RECV_GOAL::dwPointValue)
	// Goal state
	.add_property("eGoalState", &SIMCONNECT_RECV_GOAL::eGoalState)
	// Number of child goals
	.add_property("dwChildGoalCount", &SIMCONNECT_RECV_GOAL::dwChildGoalCount)
	// Goal text
	.add_property("szGoalText", &SIMCONNECT_RECV_GOAL::szGoalText)
	// Goal's succeeded text
	.add_property("szGoalSucceededText", &SIMCONNECT_RECV_GOAL::szGoalSucceededText)
	// Goal's failed text
	.add_property("szGoalFailedText", &SIMCONNECT_RECV_GOAL::szGoalFailedText);

	//when dwID == SIMCONNECT_RECV_ID_GOAL_PAIR
	boost::python::class_<SIMCONNECT_RECV_GOAL_PAIR, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_GOAL_PAIR").add_property("dwRequestID",
			&SIMCONNECT_RECV_GOAL_PAIR::dwRequestID)
	//Instance id of the child goal
	.add_property("guidChildInstanceID", &SIMCONNECT_RECV_GOAL_PAIR::guidChildInstanceID)
	//Instance id of the parent mission objective or goal
	.add_property("guidParentInstanceID", &SIMCONNECT_RECV_GOAL_PAIR::guidParentInstanceID);

	//when dwID == SIMCONNECT_RECV_ID_MISSION_OBJECTIVE
	boost::python::class_<SIMCONNECT_RECV_MISSION_OBJECTIVE, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_MISSION_OBJECTIVE").add_property(
			"dwRequestID", &SIMCONNECT_RECV_MISSION_OBJECTIVE::dwRequestID)
	// Instance id of the mission objective
	.add_property("guidInstanceID", &SIMCONNECT_RECV_MISSION_OBJECTIVE::guidInstanceID)
	// Whether mission objective is optional for mission completion
	.add_property("isOptional", &SIMCONNECT_RECV_MISSION_OBJECTIVE::isOptional)
	// Whether Mission Objective has been passed
	.add_property("isObjectivePassed", &SIMCONNECT_RECV_MISSION_OBJECTIVE::isObjectivePassed)
	// Mission objective status
	.add_property("eMissionObjectiveStatus", &SIMCONNECT_RECV_MISSION_OBJECTIVE::eMissionObjectiveStatus)
	// Value needed to pass mission objective
	.add_property("dwPassValue", &SIMCONNECT_RECV_MISSION_OBJECTIVE::dwPassValue)
	// Current score of mission objective
	.add_property("dwCurrentScore", &SIMCONNECT_RECV_MISSION_OBJECTIVE::dwCurrentScore)
	// Maximum total score possible for mission objective
	.add_property("dwTotalPossiblePoints", &SIMCONNECT_RECV_MISSION_OBJECTIVE::dwTotalPossiblePoints)
	// Points mission objective is worth when passed
	.add_property("dwPointValue", &SIMCONNECT_RECV_MISSION_OBJECTIVE::dwPointValue)
	// Priority order of mission objective
	.add_property("dwOrder", &SIMCONNECT_RECV_MISSION_OBJECTIVE::dwOrder)
	// Number of child goals
	.add_property("dwChildGoalCount", &SIMCONNECT_RECV_MISSION_OBJECTIVE::dwChildGoalCount)
	// Mission Objective text
	.add_property("szMissionObjectiveText", &SIMCONNECT_RECV_MISSION_OBJECTIVE::szMissionObjectiveText);

	//when dwID == SIMCONNECT_RECV_ID_MISSION_OBJECT_COUNT
	boost::python::class_<SIMCONNECT_RECV_MISSION_OBJECT_COUNT, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_MISSION_OBJECT_COUNT").add_property(
			"dwRequestID", &SIMCONNECT_RECV_MISSION_OBJECT_COUNT::dwRequestID)
	// Type of mission object the count is for TODO REMOVE: Whether count is goal count (otherwise is mission objective count)
	.add_property("eMissionObjectType", &SIMCONNECT_RECV_MISSION_OBJECT_COUNT::eMissionObjectType)
	// Number of mission objects of specified type in mission
	.add_property("dwCount", &SIMCONNECT_RECV_MISSION_OBJECT_COUNT::dwCount);

	//when dwID == SIMCONNECT_RECV_ID_FLIGHT_SEGMENT
	boost::python::class_<SIMCONNECT_RECV_FLIGHT_SEGMENT, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_FLIGHT_SEGMENT").add_property(
			"dwRequestID", &SIMCONNECT_RECV_FLIGHT_SEGMENT::dwRequestID)
	// Instance id of the flight segment
	.add_property("guidInstanceID", &SIMCONNECT_RECV_FLIGHT_SEGMENT::guidInstanceID)
	// Instance id of the flight segment's goal
	.add_property("guidSegmentGoalID", &SIMCONNECT_RECV_FLIGHT_SEGMENT::guidSegmentGoalID)
	// Number of parameters that are being graded in this flight segment
	.add_property("dwParameterCount", &SIMCONNECT_RECV_FLIGHT_SEGMENT::dwParameterCount)
	// Total number of ranges combined for all parameters that are graded with this flight segment
	.add_property("dwTotalRangeCount", &SIMCONNECT_RECV_FLIGHT_SEGMENT::dwTotalRangeCount);

	//when dwID == SIMCONNECT_RECV_ID_PARAMETER_RANGE
	boost::python::class_<SIMCONNECT_RECV_PARAMETER_RANGE, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_PARAMETER_RANGE").add_property(
			"dwRequestID", &SIMCONNECT_RECV_PARAMETER_RANGE::dwRequestID)
	// Number of times this range was exceeded in either direction, checking every second
	.add_property("dwExceededCount", &SIMCONNECT_RECV_PARAMETER_RANGE::dwExceededCount)
	// The upper bound of this range, in terms of value above the measured value
	.add_property("dwMaxOverMeasured", &SIMCONNECT_RECV_PARAMETER_RANGE::dwMaxOverMeasured)
	// The lower bound of this range, in terms of value under the measured value
	.add_property("dwMinUnderMeasured", &SIMCONNECT_RECV_PARAMETER_RANGE::dwMinUnderMeasured)
	//The instance ID of the Flight Segment this range belongs to
	.add_property("guidFlightSegmentID", &SIMCONNECT_RECV_PARAMETER_RANGE::guidFlightSegmentID)
	//The RGB red color value of this range
	.add_property("dwColorRedComponent", &SIMCONNECT_RECV_PARAMETER_RANGE::dwColorRedComponent)
	//The RGB green color value of this range
	.add_property("dwColorGreenComponent", &SIMCONNECT_RECV_PARAMETER_RANGE::dwColorGreenComponent)
	//The RGB blue color value of this range
	.add_property("dwColorBlueComponent", &SIMCONNECT_RECV_PARAMETER_RANGE::dwColorBlueComponent)
	// Range Name
	.add_property("szRangeName", &SIMCONNECT_RECV_PARAMETER_RANGE::szRangeName)
	// Parameter Name
	.add_property("szParameterName", &SIMCONNECT_RECV_PARAMETER_RANGE::szParameterName)
	//Units of parameter as string
	.add_property("szParameterUnitsString", &SIMCONNECT_RECV_PARAMETER_RANGE::szParameterUnitsString);

	boost::python::class_<SIMCONNECT_RECV_FLIGHT_SEGMENT_READY_FOR_GRADING, bases<SIMCONNECT_RECV_EVENT_BASE> >(
			"SIMCONNECT_RECV_FLIGHT_SEGMENT_READY_FOR_GRADING")
	// Instance id of the flight segment that is ready for grading
	.add_property("guidInstanceID", &SIMCONNECT_RECV_FLIGHT_SEGMENT_READY_FOR_GRADING::guidInstanceID);

	// when dwID == SIMCONNECT_RECV_ID_EVENT_FLIGHT_ANALYSIS_DIAGRAMS
	boost::python::class_<SIMCONNECT_RECV_EVENT_FLIGHT_ANALYSIS_DIAGRAMS, bases<SIMCONNECT_RECV_EVENT> >(
			"SIMCONNECT_RECV_EVENT_FLIGHT_ANALYSIS_DIAGRAMS")
	// Whether or not the flight analysis diagrams had a glide slope
	.add_property("hasGlideSlope", &SIMCONNECT_RECV_EVENT_FLIGHT_ANALYSIS_DIAGRAMS::hasGlideSlope);

	//when dwID == SIMCONNECT_RECV_ID_LANDING_TRIGGER_INFO
	boost::python::class_<SIMCONNECT_RECV_LANDING_TRIGGER_INFO, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_LANDING_TRIGGER_INFO").add_property(
			"dwRequestID", &SIMCONNECT_RECV_LANDING_TRIGGER_INFO::dwRequestID).add_property("landingTriggerInstanceID",
			&SIMCONNECT_RECV_LANDING_TRIGGER_INFO::landingTriggerInstanceID).add_property("landingsCount",
			&SIMCONNECT_RECV_LANDING_TRIGGER_INFO::landingsCount);

	//when dwID == SIMCONNECT_RECV_ID_LANDING_INFO
	boost::python::class_<SIMCONNECT_RECV_LANDING_INFO, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_LANDING_INFO").add_property("dwRequestID",
			&SIMCONNECT_RECV_LANDING_INFO::dwRequestID).add_property("LandingTriggerInstanceID",
			&SIMCONNECT_RECV_LANDING_INFO::LandingTriggerInstanceID).add_property("LandingType", &SIMCONNECT_RECV_LANDING_INFO::LandingType).add_property(
			"Latitude", &SIMCONNECT_RECV_LANDING_INFO::Latitude).add_property("Longitude", &SIMCONNECT_RECV_LANDING_INFO::Longitude).add_property(
			"Altitude", &SIMCONNECT_RECV_LANDING_INFO::Altitude);

	boost::python::class_<SIMCONNECT_RECV_EVENT_WEATHER_MODE, bases<SIMCONNECT_RECV_EVENT> >("SIMCONNECT_RECV_EVENT_WEATHER_MODE");

	boost::python::class_<SIMCONNECT_RECV_FACILITIES_LIST, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_FACILITIES_LIST").add_property(
			"dwRequestID", &SIMCONNECT_RECV_FACILITIES_LIST::dwRequestID).add_property("dwArraySize",
			&SIMCONNECT_RECV_FACILITIES_LIST::dwArraySize)
	// when the array of items is too big for one send, which send this is (0..dwOutOf-1)
	.add_property("dwEntryNumber", &SIMCONNECT_RECV_FACILITIES_LIST::dwEntryNumber)
	// total number of transmissions the list is chopped into
	.add_property("dwOutOf", &SIMCONNECT_RECV_FACILITIES_LIST::dwOutOf);

	boost::python::class_<SIMCONNECT_DATA_FACILITY_AIRPORT>("SIMCONNECT_DATA_FACILITY_AIRPORT")
	// ICAO of the object
	.add_property("Icao", &SIMCONNECT_DATA_FACILITY_AIRPORT::Icao)
	// degrees
	.add_property("Latitude", &SIMCONNECT_DATA_FACILITY_AIRPORT::Latitude)
	// degrees
	.add_property("Longitude", &SIMCONNECT_DATA_FACILITY_AIRPORT::Longitude)
	// meters
	.add_property("Altitude", &SIMCONNECT_DATA_FACILITY_AIRPORT::Altitude);

	boost::python::class_<SIMCONNECT_RECV_AIRPORT_LIST, bases<SIMCONNECT_RECV_FACILITIES_LIST> >("SIMCONNECT_RECV_AIRPORT_LIST").add_property(
			"rgData", &SIMCONNECT_RECV_AIRPORT_LIST::rgData);

	boost::python::class_<SIMCONNECT_DATA_FACILITY_WAYPOINT, bases<SIMCONNECT_DATA_FACILITY_AIRPORT> >("SIMCONNECT_DATA_FACILITY_WAYPOINT")
	// Magvar in degrees
	.add_property("fMagVar", &SIMCONNECT_DATA_FACILITY_WAYPOINT::fMagVar);

	boost::python::class_<SIMCONNECT_RECV_WAYPOINT_LIST, bases<SIMCONNECT_RECV_FACILITIES_LIST> >("SIMCONNECT_RECV_WAYPOINT_LIST").add_property(
			"rgData", &SIMCONNECT_RECV_WAYPOINT_LIST::rgData);

	boost::python::class_<SIMCONNECT_DATA_FACILITY_NDB, bases<SIMCONNECT_DATA_FACILITY_WAYPOINT> >("SIMCONNECT_DATA_FACILITY_NDB")
	// frequency in Hz
	.add_property("fFrequency", &SIMCONNECT_DATA_FACILITY_NDB::fFrequency);

	boost::python::class_<SIMCONNECT_RECV_NDB_LIST, bases<SIMCONNECT_RECV_FACILITIES_LIST> >("SIMCONNECT_RECV_NDB_LIST").add_property(
			"rgData", &SIMCONNECT_RECV_NDB_LIST::rgData);

	boost::python::class_<SIMCONNECT_DATA_FACILITY_TACAN, bases<SIMCONNECT_DATA_FACILITY_WAYPOINT> >("SIMCONNECT_DATA_FACILITY_TACAN")
	// frequency in Hz
	.add_property("uChannel", &SIMCONNECT_DATA_FACILITY_TACAN::uChannel)
	//X or Y band
	.add_property("bXYBandIsY", &SIMCONNECT_DATA_FACILITY_TACAN::bXYBandIsY);

	boost::python::class_<SIMCONNECT_RECV_TACAN_LIST, bases<SIMCONNECT_RECV_FACILITIES_LIST> >("SIMCONNECT_RECV_TACAN_LIST").add_property(
			"rgData", &SIMCONNECT_RECV_TACAN_LIST::rgData);

	boost::python::class_<SIMCONNECT_DATA_FACILITY_VOR, bases<SIMCONNECT_DATA_FACILITY_NDB> >("SIMCONNECT_DATA_FACILITY_VOR")
	// SIMCONNECT_VOR_FLAGS
	.add_property("Flags", &SIMCONNECT_DATA_FACILITY_VOR::Flags)
	// Localizer in degrees
	.add_property("fLocalizer", &SIMCONNECT_DATA_FACILITY_VOR::fLocalizer)
	// Glide Slope Location (deg, deg, meters)
	.add_property("GlideLat", &SIMCONNECT_DATA_FACILITY_VOR::GlideLat).add_property("GlideLon", &SIMCONNECT_DATA_FACILITY_VOR::GlideLon).add_property(
			"GlideAlt", &SIMCONNECT_DATA_FACILITY_VOR::GlideAlt)
	// Glide Slope in degrees
	.add_property("fGlideSlopeAngle", &SIMCONNECT_DATA_FACILITY_VOR::fGlideSlopeAngle);

	boost::python::class_<SIMCONNECT_RECV_VOR_LIST, bases<SIMCONNECT_RECV_FACILITIES_LIST> >("SIMCONNECT_RECV_VOR_LIST").add_property(
			"rgData", &SIMCONNECT_RECV_VOR_LIST::rgData);

	boost::python::class_<SIMCONNECT_DATA_INITPOSITION>("SIMCONNECT_DATA_INITPOSITION")
	// degrees
	.add_property("Latitude", &SIMCONNECT_DATA_INITPOSITION::Latitude)
	// degrees
	.add_property("Longitude", &SIMCONNECT_DATA_INITPOSITION::Longitude)
	// feet
	.add_property("Altitude", &SIMCONNECT_DATA_INITPOSITION::Altitude)
	// degrees
	.add_property("Pitch", &SIMCONNECT_DATA_INITPOSITION::Pitch)
	// degrees
	.add_property("Bank", &SIMCONNECT_DATA_INITPOSITION::Bank)
	// degrees
	.add_property("Heading", &SIMCONNECT_DATA_INITPOSITION::Heading)
	// 1=force to be on the ground
	.add_property("OnGround", &SIMCONNECT_DATA_INITPOSITION::OnGround)
	// knots
	.add_property("Airspeed", &SIMCONNECT_DATA_INITPOSITION::Airspeed);

	boost::python::class_<SIMCONNECT_DATA_MARKERSTATE>("SIMCONNECT_DATA_MARKERSTATE").add_property("szMarkerName",
			&SIMCONNECT_DATA_MARKERSTATE::szMarkerName).add_property("dwMarkerState", &SIMCONNECT_DATA_MARKERSTATE::dwMarkerState);

	boost::python::class_<SIMCONNECT_DATA_WAYPOINT>("SIMCONNECT_DATA_WAYPOINT")
	// degrees
	.add_property("Latitude", &SIMCONNECT_DATA_WAYPOINT::Latitude)
	// degrees
	.add_property("Longitude", &SIMCONNECT_DATA_WAYPOINT::Longitude)
	// feet
	.add_property("Altitude", &SIMCONNECT_DATA_WAYPOINT::Altitude)
	// knots
	.add_property("ktsSpeed", &SIMCONNECT_DATA_WAYPOINT::ktsSpeed).add_property("percentThrottle",
			&SIMCONNECT_DATA_WAYPOINT::percentThrottle);

	boost::python::class_<SIMCONNECT_DATA_XYZ>("SIMCONNECT_DATA_XYZ").add_property("x", &SIMCONNECT_DATA_XYZ::x).add_property("y",
			&SIMCONNECT_DATA_XYZ::y).add_property("z", &SIMCONNECT_DATA_XYZ::z);

	boost::python::class_<SIMCONNECT_DATA_PBH>("SIMCONNECT_DATA_PBH").add_property("Pitch", &SIMCONNECT_DATA_PBH::Pitch).add_property(
			"Bank", &SIMCONNECT_DATA_PBH::Bank).add_property("Heading", &SIMCONNECT_DATA_PBH::Heading);

	boost::python::class_<SIMCONNECT_DATA_OBSERVER>("SIMCONNECT_DATA_OBSERVER").add_property("Position",
			&SIMCONNECT_DATA_OBSERVER::Position).add_property("Rotation", &SIMCONNECT_DATA_OBSERVER::Rotation).add_property("Regime",
			&SIMCONNECT_DATA_OBSERVER::Regime).add_property("RotateOnTarget", &SIMCONNECT_DATA_OBSERVER::RotateOnTarget).add_property(
			"FocusFixed", &SIMCONNECT_DATA_OBSERVER::FocusFixed).add_property("FocalLength", &SIMCONNECT_DATA_OBSERVER::FocalLength).add_property(
			"FieldOfViewH", &SIMCONNECT_DATA_OBSERVER::FieldOfViewH).add_property("FieldOfViewV", &SIMCONNECT_DATA_OBSERVER::FieldOfViewV).add_property(
			"LinearStep", &SIMCONNECT_DATA_OBSERVER::LinearStep).add_property("AngularStep", &SIMCONNECT_DATA_OBSERVER::AngularStep);

	boost::python::class_<SIMCONNECT_RECV_OBSERVER_DATA, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_OBSERVER_DATA").add_property(
			"dwRequestID", &SIMCONNECT_RECV_OBSERVER_DATA::dwRequestID).add_property("szObserverName",
			&SIMCONNECT_RECV_OBSERVER_DATA::szObserverName).add_property("ObserverData", &SIMCONNECT_RECV_OBSERVER_DATA::ObserverData);

	boost::python::class_<SIMCONNECT_DATA_GROUND_INFO>("SIMCONNECT_DATA_GROUND_INFO")
	// true = this data item is valid
	.add_property("bIsValid", &SIMCONNECT_DATA_GROUND_INFO::bIsValid)
	// Latitude of this point (units based on SIMCONNECT_RECV_GROUND_INFO.eFlags)
	.add_property("fLat", &SIMCONNECT_DATA_GROUND_INFO::fLat)
	// Longitude of this point (units based on SIMCONNECT_RECV_GROUND_INFO.eFlags)
	.add_property("fLon", &SIMCONNECT_DATA_GROUND_INFO::fLon)
	// Altitude of this point (units based on SIMCONNECT_RECV_GROUND_INFO.eFlags)
	.add_property("fAlt", &SIMCONNECT_DATA_GROUND_INFO::fAlt)
	// I Component of normal at point
	.add_property("fNormalI", &SIMCONNECT_DATA_GROUND_INFO::fNormalI)
	// J Component of normal at point
	.add_property("fNormalJ", &SIMCONNECT_DATA_GROUND_INFO::fNormalJ)
	// K Component of normal at point
	.add_property("fNormalK", &SIMCONNECT_DATA_GROUND_INFO::fNormalK)
	// Surface Type value
	.add_property("eSurfaceType", &SIMCONNECT_DATA_GROUND_INFO::eSurfaceType)
	// Surface Condition value
	.add_property("eSurfaceCondition", &SIMCONNECT_DATA_GROUND_INFO::eSurfaceCondition)
	// true = Point represents a platform
	.add_property("bIsPlatform", &SIMCONNECT_DATA_GROUND_INFO::bIsPlatform)
	// true = Point represents a moving plaform
	.add_property("bIsPlatformMoving", &SIMCONNECT_DATA_GROUND_INFO::bIsPlatformMoving);

	boost::python::class_<SIMCONNECT_RECV_GROUND_INFO, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_GROUND_INFO")
	// Request ID for this reply
	.add_property("dwRequestID", &SIMCONNECT_RECV_GROUND_INFO::dwRequestID)
	// Grid Width asked for
	.add_property("dwGridWidth", &SIMCONNECT_RECV_GROUND_INFO::dwGridWidth)
	// Grid Hieght asked for
	.add_property("dwGridHeight", &SIMCONNECT_RECV_GROUND_INFO::dwGridHeight)
	// Number of points in rgData (Grid Width * Grid Height)
	.add_property("dwArraySize", &SIMCONNECT_RECV_GROUND_INFO::dwArraySize).add_property("dwFlags", &SIMCONNECT_RECV_GROUND_INFO::dwFlags)
	// true if any point in rgData returned no data
	.add_property("bNotAllValid", &SIMCONNECT_RECV_GROUND_INFO::bNotAllValid).add_property("rgData", &SIMCONNECT_RECV_GROUND_INFO::rgData);

	boost::python::class_<SIMCONNECT_RECV_EXTERNAL_SIM_BASE, bases<SIMCONNECT_RECV> >("SIMCONNECT_RECV_EXTERNAL_SIM_BASE").add_property(
			"guidExternalSimID", &SIMCONNECT_RECV_EXTERNAL_SIM_BASE::guidExternalSimID).add_property("dwObjectID",
			&SIMCONNECT_RECV_EXTERNAL_SIM_BASE::dwObjectID);

	boost::python::class_<SIMCONNECT_RECV_EXTERNAL_SIM_CREATE, bases<SIMCONNECT_RECV_EXTERNAL_SIM_BASE> >(
			"SIMCONNECT_RECV_EXTERNAL_SIM_CREATE")
	// number of simvars for this external sim
	.add_property("dwExternalSimVarCount", &SIMCONNECT_RECV_EXTERNAL_SIM_CREATE::dwExternalSimVarCount)
	// first index of simvars for this external sim
	.add_property("dwExternalSimVarBase", &SIMCONNECT_RECV_EXTERNAL_SIM_CREATE::dwExternalSimVarBase)
	// Variable length string payload containing data to pass along to the external sim
	.add_property("szExternalSimData", &SIMCONNECT_RECV_EXTERNAL_SIM_CREATE::szExternalSimData);

	boost::python::class_<SIMCONNECT_RECV_EXTERNAL_SIM_DESTROY, bases<SIMCONNECT_RECV_EXTERNAL_SIM_BASE> >(
			"SIMCONNECT_RECV_EXTERNAL_SIM_DESTROY");

	boost::python::class_<SIMCONNECT_RECV_EXTERNAL_SIM_SIMULATE, bases<SIMCONNECT_RECV_EXTERNAL_SIM_BASE> >(
			"SIMCONNECT_RECV_EXTERNAL_SIM_SIMULATE").add_property("fDeltaTime", &SIMCONNECT_RECV_EXTERNAL_SIM_SIMULATE::fDeltaTime).add_property(
			"bShouldSimulate", &SIMCONNECT_RECV_EXTERNAL_SIM_SIMULATE::bShouldSimulate).add_property("dwDefineID",
			&SIMCONNECT_RECV_EXTERNAL_SIM_SIMULATE::dwDefineID)
	// data count (number of datums, *not* byte count)
	.add_property("dwDefineCount", &SIMCONNECT_RECV_EXTERNAL_SIM_SIMULATE::dwDefineCount)
	// data begins here, dwDefineCount data items
	.add_property("dwData", &SIMCONNECT_RECV_EXTERNAL_SIM_SIMULATE::dwData);

	boost::python::class_<SIMCONNECT_RECV_EXTERNAL_SIM_LOCATION_CHANGED, bases<SIMCONNECT_RECV_EXTERNAL_SIM_BASE> >(
			"SIMCONNECT_RECV_EXTERNAL_SIM_LOCATION_CHANGED").add_property("fLatRadians",
			&SIMCONNECT_RECV_EXTERNAL_SIM_LOCATION_CHANGED::fLatRadians).add_property("fLonRadians",
			&SIMCONNECT_RECV_EXTERNAL_SIM_LOCATION_CHANGED::fLonRadians).add_property("fAltMeters",
			&SIMCONNECT_RECV_EXTERNAL_SIM_LOCATION_CHANGED::fAltMeters).add_property("bPlaceOnGround",
			&SIMCONNECT_RECV_EXTERNAL_SIM_LOCATION_CHANGED::bPlaceOnGround).add_property("bZeroSpeed",
			&SIMCONNECT_RECV_EXTERNAL_SIM_LOCATION_CHANGED::bZeroSpeed);

	boost::python::class_<SIMCONNECT_RECV_EXTERNAL_SIM_EVENT, bases<SIMCONNECT_RECV_EXTERNAL_SIM_BASE> >(
			"SIMCONNECT_RECV_EXTERNAL_SIM_EVENT").add_property("uEventID", &SIMCONNECT_RECV_EXTERNAL_SIM_EVENT::uEventID).add_property(
			"dwData", &SIMCONNECT_RECV_EXTERNAL_SIM_EVENT::dwData);

}

