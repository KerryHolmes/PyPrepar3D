#include "module.hpp"
#include "converter.hpp"

BOOST_PYTHON_MODULE(_simconnect)
{
	using namespace boost::python;

	to_python_converter<DWORD, prepar3d::_internal::DWORD_CONVERTER>();
	to_python_converter<char, prepar3d::_internal::CHAR_CONVERTER>();
	to_python_converter<char [256], prepar3d::_internal::CHAR_ARRAY_CONVERTER<256> >();
	to_python_converter<char [MAX_PATH], prepar3d::_internal::CHAR_ARRAY_CONVERTER<MAX_PATH> >();

	prepar3d::_internal::define_constants(&scope());

//#######################################################################################
//  function section
//#######################################################################################

	def("open", prepar3d::simconnect_open);
	def("close", prepar3d::simconnect_close);
	def("call_dispatch", prepar3d::simconnect_calldispatch);
	def("subscribe_to_system_event", prepar3d::simconnect_subscribe_to_system_event);

//#######################################################################################
//  enum section
//#######################################################################################

	//
	// Flags used in SimConnect_RequestGroundInfo API call
	//

	// specify format for the LatLon components
	ENUM(SIMCONNECT_GROUND_INFO_LATLON_FORMAT)
		ENUM_VALUE(SIMCONNECT_GROUND_INFO_LATLON_FORMAT_RADIANS)
		ENUM_VALUE(SIMCONNECT_GROUND_INFO_LATLON_FORMAT_DEGREES)
		ENUM_VALUE(SIMCONNECT_GROUND_INFO_LATLON_FORMAT_METERS);

	// specify format for the Alt components
	ENUM(SIMCONNECT_GROUND_INFO_ALT_FORMAT)
		ENUM_VALUE(SIMCONNECT_GROUND_INFO_ALT_FORMAT_METERS)
		ENUM_VALUE(SIMCONNECT_GROUND_INFO_ALT_FORMAT_FEET);

	ENUM(SIMCONNECT_CAMERA_SENSOR_MODE)
		ENUM_VALUE(SIMCONNECT_CAMERA_SENSOR_NONE)
		ENUM_VALUE(SIMCONNECT_CAMERA_SENSOR_IR)
		ENUM_VALUE(SIMCONNECT_CAMERA_SENSOR_IR_BLACK_HOT)
		ENUM_VALUE(SIMCONNECT_CAMERA_SENSOR_GDATA);

	ENUM(SIMCONNECT_LICENSE_TYPE)
		ENUM_VALUE(SIMCONNECT_LICENSE_ACADEMIC)
		ENUM_VALUE(SIMCONNECT_LICENSE_PROFESSIONAL)
		ENUM_VALUE(SIMCONNECT_LICENSE_PROFESSIONAL_PLUS)
		ENUM_VALUE(SIMCONNECT_LICENSE_UNKNOWN);

	ENUM(SIMCONNECT_SCENERY_COMPLEXITY)
		ENUM_VALUE(SIMCONNECT_SCENERY_COMPLEXITY_VERY_SPARSE)
		ENUM_VALUE(SIMCONNECT_SCENERY_COMPLEXITY_SPARSE)
		ENUM_VALUE(SIMCONNECT_SCENERY_COMPLEXITY_NORMAL)
		ENUM_VALUE(SIMCONNECT_SCENERY_COMPLEXITY_DENSE)
		ENUM_VALUE(SIMCONNECT_SCENERY_COMPLEXITY_VERY_DENSE)
		ENUM_VALUE(SIMCONNECT_SCENERY_COMPLEXITY_EXTREMELY_DENSE);

	ENUM(SIMCONNECT_GOAL_STATE)
		ENUM_VALUE(SIMCONNECT_GOAL_STATE_GOAL_PENDING)
		ENUM_VALUE(SIMCONNECT_GOAL_STATE_GOAL_COMPLETED)
		ENUM_VALUE(SIMCONNECT_GOAL_STATE_GOAL_FAILED);

	ENUM(SIMCONNECT_GOAL_RESOLUTION)
		ENUM_VALUE(SIMCONNECT_GOAL_RESOLUTION_COMPLETED)
		ENUM_VALUE(SIMCONNECT_GOAL_RESOLUTION_FAILED);

	ENUM(SIMCONNECT_MISSION_OBJECTIVE_STATUS)
		ENUM_VALUE(SIMCONNECT_MISSION_OBJECTIVE_STATUS_PENDING)
		ENUM_VALUE(SIMCONNECT_MISSION_OBJECTIVE_STATUS_PASSED)
		ENUM_VALUE(SIMCONNECT_MISSION_OBJECTIVE_STATUS_FAILED);

	ENUM(SIMCONNECT_MISSION_OBJECT_TYPE)
		ENUM_VALUE(SIMCONNECT_MISSION_OBJECT_TYPE_GOAL)
		ENUM_VALUE(SIMCONNECT_MISSION_OBJECT_TYPE_MISSION_OBJECTIVE)
		ENUM_VALUE(SIMCONNECT_MISSION_OBJECT_TYPE_FLIGHT_SEGMENT)
		ENUM_VALUE(SIMCONNECT_MISSION_OBJECT_TYPE_LANDING_TRIGGER);

	ENUM(SIMCONNECT_LANDING_TYPE)
		ENUM_VALUE(SIMCONNECT_LANDING_TYPE_ANY)
		ENUM_VALUE(SIMCONNECT_LANDING_TYPE_FULL_STOP)
		ENUM_VALUE(SIMCONNECT_LANDING_TYPE_TOUCHDOWN);

	// Object types
	ENUM(SIMCONNECT_SIMOBJECT_TYPE)
		ENUM_VALUE(SIMCONNECT_SIMOBJECT_TYPE_USER)
		ENUM_VALUE(SIMCONNECT_SIMOBJECT_TYPE_ALL)
		ENUM_VALUE(SIMCONNECT_SIMOBJECT_TYPE_AIRPLANE)
		ENUM_VALUE(SIMCONNECT_SIMOBJECT_TYPE_AIRPLANE)
		ENUM_VALUE(SIMCONNECT_SIMOBJECT_TYPE_HELICOPTER)
		ENUM_VALUE(SIMCONNECT_SIMOBJECT_TYPE_BOAT)
		ENUM_VALUE( SIMCONNECT_SIMOBJECT_TYPE_GROUND)
		ENUM_VALUE(SIMCONNECT_SIMOBJECT_TYPE_WEAPON);

//#######################################################################################
//  structure section
//#######################################################################################

	STRUCT(SIMCONNECT_RECV)
		STRUCT_VALUE(dwSize, SIMCONNECT_RECV)
		STRUCT_VALUE(dwVersion, SIMCONNECT_RECV)
		STRUCT_VALUE(dwID, SIMCONNECT_RECV);

	STRUCT_DERIVED(SIMCONNECT_RECV_EXCEPTION,SIMCONNECT_RECV)
			STRUCT_VALUE(dwException, SIMCONNECT_RECV_EXCEPTION)
			STRUCT_VALUE(dwSendID, SIMCONNECT_RECV_EXCEPTION)
			STRUCT_VALUE(dwIndex, SIMCONNECT_RECV_EXCEPTION)
			.def_readonly("UNKNOWN_INDEX", SIMCONNECT_RECV_EXCEPTION::UNKNOWN_INDEX)
			.def_readonly("UNKNOWN_SENDID", SIMCONNECT_RECV_EXCEPTION::UNKNOWN_SENDID);

	STRUCT_DERIVED(SIMCONNECT_RECV_OPEN, SIMCONNECT_RECV)
		.add_property("szApplicationName", &SIMCONNECT_RECV_OPEN::szApplicationName)
		STRUCT_VALUE(dwApplicationVersionMajor, SIMCONNECT_RECV_OPEN)
		STRUCT_VALUE(dwApplicationVersionMinor, SIMCONNECT_RECV_OPEN)
		STRUCT_VALUE(dwApplicationBuildMajor, SIMCONNECT_RECV_OPEN)
		STRUCT_VALUE(dwApplicationBuildMinor, SIMCONNECT_RECV_OPEN)
		STRUCT_VALUE(dwSimConnectVersionMajor, SIMCONNECT_RECV_OPEN)
		STRUCT_VALUE(dwSimConnectVersionMinor, SIMCONNECT_RECV_OPEN)
		STRUCT_VALUE(dwSimConnectBuildMajor, SIMCONNECT_RECV_OPEN)
		STRUCT_VALUE(dwSimConnectBuildMinor, SIMCONNECT_RECV_OPEN)
		STRUCT_VALUE(dwReserved1, SIMCONNECT_RECV_OPEN)
		STRUCT_VALUE(dwReserved2, SIMCONNECT_RECV_OPEN);

	STRUCT_DERIVED(SIMCONNECT_RECV_QUIT, SIMCONNECT_RECV);

	STRUCT_DERIVED(SIMCONNECT_RECV_EVENT_BASE, SIMCONNECT_RECV)
		STRUCT_VALUE(uGroupID, SIMCONNECT_RECV_EVENT_BASE)
		STRUCT_VALUE(uEventID, SIMCONNECT_RECV_EVENT_BASE)
		STRUCT_VALUE(dwData, SIMCONNECT_RECV_EVENT_BASE)
		.def_readonly("UNKNOWN_GROUP", SIMCONNECT_RECV_EVENT_BASE::UNKNOWN_GROUP);

	STRUCT_DERIVED(SIMCONNECT_RECV_EVENT, SIMCONNECT_RECV_EVENT_BASE)
		STRUCT_VALUE(dwFlags, SIMCONNECT_RECV_EVENT);


	STRUCT_DERIVED(SIMCONNECT_RECV_EVENT_FILENAME, SIMCONNECT_RECV_EVENT_BASE)
		.add_property("szFileName", &SIMCONNECT_RECV_EVENT_FILENAME::szFileName)
		STRUCT_VALUE(dwFlags, SIMCONNECT_RECV_EVENT_FILENAME);

	STRUCT_DERIVED(SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE, SIMCONNECT_RECV_EVENT_BASE)
		STRUCT_VALUE(eObjType, SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE)
		STRUCT_VALUE(dwFlags, SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE);


}

