/*
 * recv_type_converter.cpp
 *
 *  Created on: Oct 24, 2014
 *      Author: Erik
 */

#include "recv_type_converter.hpp"

namespace prepar3d
{
namespace simconnect
{
void RecvTypeConverter::init()
{
	REGISTER_CONVERTER(OPEN);
	REGISTER_CONVERTER(EVENT);
	REGISTER_CONVERTER(EXCEPTION);
	REGISTER_CONVERTER(QUIT);
	REGISTER_CONVERTER(EVENT_OBJECT_ADDREMOVE);
	REGISTER_CONVERTER(EVENT_FILENAME);
	REGISTER_CONVERTER(EVENT_FRAME);
	REGISTER_CONVERTER(SIMOBJECT_DATA);
	REGISTER_CONVERTER(SIMOBJECT_DATA_BYTYPE);
	REGISTER_CONVERTER(WEATHER_OBSERVATION);
	REGISTER_CONVERTER(CLOUD_STATE);
	REGISTER_CONVERTER(ASSIGNED_OBJECT_ID);
	REGISTER_CONVERTER(RESERVED_KEY);
	REGISTER_CONVERTER(CUSTOM_ACTION);
	REGISTER_CONVERTER(SYSTEM_STATE);
	REGISTER_CONVERTER(CLIENT_DATA);
	REGISTER_CONVERTER(EVENT_WEATHER_MODE);
	REGISTER_CONVERTER(AIRPORT_LIST);
	REGISTER_CONVERTER(VOR_LIST);
	REGISTER_CONVERTER(NDB_LIST);
	REGISTER_CONVERTER(WAYPOINT_LIST);
	REGISTER_CONVERTER(EVENT_MULTIPLAYER_SERVER_STARTED);
	REGISTER_CONVERTER(EVENT_MULTIPLAYER_CLIENT_STARTED);
	REGISTER_CONVERTER(EVENT_MULTIPLAYER_SESSION_ENDED);
	REGISTER_CONVERTER(EVENT_RACE_END);
	REGISTER_CONVERTER(EVENT_RACE_LAP);
	REGISTER_CONVERTER(OBSERVER_DATA);

	REGISTER_CONVERTER(GROUND_INFO);
	REGISTER_CONVERTER(SYNCHRONOUS_BLOCK);
	REGISTER_CONVERTER(EXTERNAL_SIM_CREATE);
	REGISTER_CONVERTER(EXTERNAL_SIM_DESTROY);
	REGISTER_CONVERTER(EXTERNAL_SIM_SIMULATE);
	REGISTER_CONVERTER(EXTERNAL_SIM_LOCATION_CHANGED);
	REGISTER_CONVERTER(EXTERNAL_SIM_EVENT);
	REGISTER_CONVERTER(EVENT_WEAPON);
	REGISTER_CONVERTER(EVENT_COUNTERMEASURE);
	REGISTER_CONVERTER(EVENT_OBJECT_DAMAGED_BY_WEAPON);
	REGISTER_CONVERTER(VERSION);
	REGISTER_CONVERTER(SCENERY_COMPLEXITY);
	REGISTER_CONVERTER(SHADOW_FLAGS);
	REGISTER_CONVERTER(TACAN_LIST);
	REGISTER_CONVERTER(CAMERA_6DOF);
	REGISTER_CONVERTER(CAMERA_FOV);
	REGISTER_CONVERTER(CAMERA_SENSOR_MODE);
	REGISTER_CONVERTER(CAMERA_WINDOW_POSITION);
	REGISTER_CONVERTER(CAMERA_WINDOW_SIZE);
	REGISTER_CONVERTER(MISSION_OBJECT_COUNT);
	REGISTER_CONVERTER(GOAL);
	REGISTER_CONVERTER(MISSION_OBJECTIVE);
	REGISTER_CONVERTER(FLIGHT_SEGMENT);
	REGISTER_CONVERTER(PARAMETER_RANGE);
	REGISTER_CONVERTER(FLIGHT_SEGMENT_READY_FOR_GRADING);
	REGISTER_CONVERTER(GOAL_PAIR);
	REGISTER_CONVERTER(EVENT_FLIGHT_ANALYSIS_DIAGRAMS);
	REGISTER_CONVERTER(LANDING_TRIGGER_INFO);
	REGISTER_CONVERTER(LANDING_INFO);
	REGISTER_CONVERTER(SESSION_DURATION);
}

object RecvTypeConverter::operator()(SIMCONNECT_RECV *recv) const
{
	return _functionMap.at(static_cast<SIMCONNECT_RECV_ID>(recv->dwID))(recv);
}

} // end namespace simconnect
} // end namespace prepar3d
